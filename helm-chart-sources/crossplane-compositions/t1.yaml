---
# Source: crossplane-functions/templates/addons/common/variables/vairables.tpl
#VariableName  DefaultValue  FromFieldPath  ToFieldPath  Type  Format
---
# Source: crossplane-functions/templates/xcertificate/common/variables.tpl
#VariableName  DefaultValue  FromFieldPath  ToFieldPath  Type  Format
---
# Source: crossplane-functions/templates/xcertificateset/common/variables.tpl
#VariableName  DefaultValue  FromFieldPath  ToFieldPath  Type  Format
---
# Source: crossplane-functions/templates/xclusterComponents/vairables.tpl
#VariableName  DefaultValue  FromFieldPath  ToFieldPath  Type  Format
---
# Source: crossplane-functions/templates/addons/argocd/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsargocds.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsArgocd
    plural: xaddonsargocds
    singular: xaddonsargocd
  claimNames:
    kind: AddonsArgocdClaim
    plural: addonsargocdclaims
    singular: addonsargocdclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsArgocd is the Schema for the xaddonsargocd API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/beget-provider/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsbegetcmproviders.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsBegetCmProvider
    plural: xaddonsbegetcmproviders
    singular: xaddonsbegetcmprovider
  claimNames:
    kind: AddonsBegetCmProviderClaim
    plural: addonsbegetcmproviderclaims
    singular: addonsbegetcmproviderclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsBegetCmProvider is the Schema for the xaddonsbegetcmprovider API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/capi-kubeadm-bootstrap/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscapikubeadmbootstraps.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCapiKubeadmBootstrap
    plural: xaddonscapikubeadmbootstraps
    singular: xaddonscapikubeadmbootstrap
  claimNames:
    kind: AddonsCapiKubeadmBootstrapClaim
    plural: addonscapikubeadmbootstrapclaims
    singular: addonscapikubeadmbootstrapclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCapiKubeadmBootstrap is the Schema for the xaddonscapikubeadmbootstrap API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/capi-kubeadm-control-plane/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscapikubeadmcontrolplanes.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCapiKubeadmControlPlane
    plural: xaddonscapikubeadmcontrolplanes
    singular: xaddonscapikubeadmcontrolplane
  claimNames:
    kind: AddonsCapiKubeadmControlPlaneClaim
    plural: addonscapikubeadmcontrolplaneclaims
    singular: addonscapikubeadmcontrolplaneclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCapiKubeadmControlPlane is the Schema for the xaddonscapikubeadmcontrolplane API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/capi/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscapis.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCapi
    plural: xaddonscapis
    singular: xaddonscapi
  claimNames:
    kind: AddonsCapiClaim
    plural: addonscapiclaims
    singular: addonscapiclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCapi is the Schema for the xaddonscapi API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/ccm/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsccms.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCcm
    plural: xaddonsccms
    singular: xaddonsccm
  claimNames:
    kind: AddonsCcmClaim
    plural: addonsccmclaims
    singular: addonsccmclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCcm is the Schema for the xaddonsccm API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/cert-manager-csi-driver/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscertmanagercsidrivers.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCertManagerCsiDriver
    plural: xaddonscertmanagercsidrivers
    singular: xaddonscertmanagercsidriver
  claimNames:
    kind: AddonsCertManagerCsiDriverClaim
    plural: addonscertmanagercsidriverclaims
    singular: addonscertmanagercsidriverclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCertManagerCsiDriver is the Schema for the xaddonscertmanagercsidriver API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/cert-manager/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscertmanagers.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCertManager
    plural: xaddonscertmanagers
    singular: xaddonscertmanager
  claimNames:
    kind: AddonsCertManagerClaim
    plural: addonscertmanagerclaims
    singular: addonscertmanagerclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCertManager is the Schema for the xaddonscertmanager API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/cilium/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsciliums.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCilium
    plural: xaddonsciliums
    singular: xaddonscilium
  claimNames:
    kind: AddonsCiliumClaim
    plural: addonsciliumclaims
    singular: addonsciliumclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCilium is the Schema for the xaddonscilium API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/coredns/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscorednss.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCoredns
    plural: xaddonscorednss
    singular: xaddonscoredns
  claimNames:
    kind: AddonsCorednsClaim
    plural: addonscorednsclaims
    singular: addonscorednsclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCoredns is the Schema for the xaddonscoredns API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/crossplane-compositions/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscrossplanecompositionss.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCrossplaneCompositions
    plural: xaddonscrossplanecompositionss
    singular: xaddonscrossplanecompositions
  claimNames:
    kind: AddonsCrossplaneCompositionsClaim
    plural: addonscrossplanecompositionsclaims
    singular: addonscrossplanecompositionsclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCrossplaneCompositions is the Schema for the xaddonscrossplanecompositions API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/crossplane-functions/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscrossplanefunctionss.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCrossplaneFunctions
    plural: xaddonscrossplanefunctionss
    singular: xaddonscrossplanefunctions
  claimNames:
    kind: AddonsCrossplaneFunctionsClaim
    plural: addonscrossplanefunctionsclaims
    singular: addonscrossplanefunctionsclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCrossplaneFunctions is the Schema for the xaddonscrossplanefunctions API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/crossplane-xcluster/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscrossplanexclusters.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCrossplaneXcluster
    plural: xaddonscrossplanexclusters
    singular: xaddonscrossplanexcluster
  claimNames:
    kind: AddonsCrossplaneXclusterClaim
    plural: addonscrossplanexclusterclaims
    singular: addonscrossplanexclusterclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCrossplaneXcluster is the Schema for the xaddonscrossplanexcluster API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/crossplane/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscrossplanes.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCrossplane
    plural: xaddonscrossplanes
    singular: xaddonscrossplane
  claimNames:
    kind: AddonsCrossplaneClaim
    plural: addonscrossplaneclaims
    singular: addonscrossplaneclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCrossplane is the Schema for the xaddonscrossplane API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/csrc/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonscsrcs.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsCsrc
    plural: xaddonscsrcs
    singular: xaddonscsrc
  claimNames:
    kind: AddonsCsrcClaim
    plural: addonscsrcclaims
    singular: addonscsrcclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsCsrc is the Schema for the xaddonscsrc API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/dex/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsdexs.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsDex
    plural: xaddonsdexs
    singular: xaddonsdex
  claimNames:
    kind: AddonsDexClaim
    plural: addonsdexclaims
    singular: addonsdexclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsDex is the Schema for the xaddonsdex API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/etcd-backups/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsetcdbackups.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsEtcdBackup
    plural: xaddonsetcdbackups
    singular: xaddonsetcdbackup
  claimNames:
    kind: AddonsEtcdBackupClaim
    plural: addonsetcdbackupclaims
    singular: addonsetcdbackupclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsEtcdBackup is the Schema for the xaddonsetcdbackup API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/grafana-dashboards/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsgrafanadashboardss.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsGrafanaDashboards
    plural: xaddonsgrafanadashboardss
    singular: xaddonsgrafanadashboards
  claimNames:
    kind: AddonsGrafanaDashboardsClaim
    plural: addonsgrafanadashboardsclaims
    singular: addonsgrafanadashboardsclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsGrafanaDashboards is the Schema for the xaddonsgrafanadashboards API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/grafana-operator/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsgrafanaoperators.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsGrafanaOperator
    plural: xaddonsgrafanaoperators
    singular: xaddonsgrafanaoperator
  claimNames:
    kind: AddonsGrafanaOperatorClaim
    plural: addonsgrafanaoperatorclaims
    singular: addonsgrafanaoperatorclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsGrafanaOperator is the Schema for the xaddonsgrafanaoperator API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/grafana/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsgrafanas.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsGrafana
    plural: xaddonsgrafanas
    singular: xaddonsgrafana
  claimNames:
    kind: AddonsGrafanaClaim
    plural: addonsgrafanaclaims
    singular: addonsgrafanaclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsGrafana is the Schema for the xaddonsgrafana API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/helm-inserter/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonshelminserters.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsHelmInserter
    plural: xaddonshelminserters
    singular: xaddonshelminserter
  claimNames:
    kind: AddonsHelmInserterClaim
    plural: addonshelminserterclaims
    singular: addonshelminserterclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsHelmInserter is the Schema for the xaddonshelminserter API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/incloud-ui/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsinclouduis.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsIncloudUi
    plural: xaddonsinclouduis
    singular: xaddonsincloudui
  claimNames:
    kind: AddonsIncloudUiClaim
    plural: addonsinclouduiclaims
    singular: addonsinclouduiclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsIncloudUi is the Schema for the xaddonsincloudui API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/incloud-web-resources/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsincloudwebresourcess.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsIncloudWebResources
    plural: xaddonsincloudwebresourcess
    singular: xaddonsincloudwebresources
  claimNames:
    kind: AddonsIncloudWebResourcesClaim
    plural: addonsincloudwebresourcesclaims
    singular: addonsincloudwebresourcesclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsIncloudWebResources is the Schema for the xaddonsincloudwebresources API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/istio-base/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsistiobases.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsIstioBase
    plural: xaddonsistiobases
    singular: xaddonsistiobase
  claimNames:
    kind: AddonsIstioBaseClaim
    plural: addonsistiobaseclaims
    singular: addonsistiobaseclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsIstioBase is the Schema for the xaddonsistiobase API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/istio-gw/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsistiogws.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsIstioGw
    plural: xaddonsistiogws
    singular: xaddonsistiogw
  claimNames:
    kind: AddonsIstioGwClaim
    plural: addonsistiogwclaims
    singular: addonsistiogwclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsIstioGw is the Schema for the xaddonsistiogw API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/istiod/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsistiods.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsIstiod
    plural: xaddonsistiods
    singular: xaddonsistiod
  claimNames:
    kind: AddonsIstiodClaim
    plural: addonsistiodclaims
    singular: addonsistiodclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsIstiod is the Schema for the xaddonsistiod API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/konnectivity-agent/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonskonnectivityagents.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsKonnectivityAgent
    plural: xaddonskonnectivityagents
    singular: xaddonskonnectivityagent
  claimNames:
    kind: AddonsKonnectivityAgentClaim
    plural: addonskonnectivityagentclaims
    singular: addonskonnectivityagentclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsKonnectivityAgent is the Schema for the xaddonskonnectivityagent API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/konnectivity-server/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonskonnectivityservers.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsKonnectivityServer
    plural: xaddonskonnectivityservers
    singular: xaddonskonnectivityserver
  claimNames:
    kind: AddonsKonnectivityServerClaim
    plural: addonskonnectivityserverclaims
    singular: addonskonnectivityserverclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsKonnectivityServer is the Schema for the xaddonskonnectivityserver API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/kube-state-metrics/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonskubestatemetricss.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsKubeStateMetrics
    plural: xaddonskubestatemetricss
    singular: xaddonskubestatemetrics
  claimNames:
    kind: AddonsKubeStateMetricsClaim
    plural: addonskubestatemetricsclaims
    singular: addonskubestatemetricsclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsKubeStateMetrics is the Schema for the xaddonskubestatemetrics API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/kubeadmResources/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonskubeadmresourcess.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsKubeadmResources
    plural: xaddonskubeadmresourcess
    singular: xaddonskubeadmresources
  claimNames:
    kind: AddonsKubeadmResourcesClaim
    plural: addonskubeadmresourcesclaims
    singular: addonskubeadmresourcesclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsKubeadmResources is the Schema for the xaddonskubeadmresources API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/metallb/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsmetallbs.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsMetallb
    plural: xaddonsmetallbs
    singular: xaddonsmetallb
  claimNames:
    kind: AddonsMetallbClaim
    plural: addonsmetallbclaims
    singular: addonsmetallbclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsMetallb is the Schema for the xaddonsmetallb API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/metrics-server/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsmetricsservers.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsMetricsServer
    plural: xaddonsmetricsservers
    singular: xaddonsmetricsserver
  claimNames:
    kind: AddonsMetricsServerClaim
    plural: addonsmetricsserverclaims
    singular: addonsmetricsserverclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsMetricsServer is the Schema for the xaddonsmetricsserver API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/process-exporter/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsprocessexporters.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsProcessExporter
    plural: xaddonsprocessexporters
    singular: xaddonsprocessexporter
  claimNames:
    kind: AddonsProcessExporterClaim
    plural: addonsprocessexporterclaims
    singular: addonsprocessexporterclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsProcessExporter is the Schema for the xaddonsprocessexporter API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/prometheus-adapter/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsprometheusadapters.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsPrometheusAdapter
    plural: xaddonsprometheusadapters
    singular: xaddonsprometheusadapter
  claimNames:
    kind: AddonsPrometheusAdapterClaim
    plural: addonsprometheusadapterclaims
    singular: addonsprometheusadapterclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsPrometheusAdapter is the Schema for the xaddonsprometheusadapter API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/prometheus-node-exporter/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsprometheusnodeexporters.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsPrometheusNodeExporter
    plural: xaddonsprometheusnodeexporters
    singular: xaddonsprometheusnodeexporter
  claimNames:
    kind: AddonsPrometheusNodeExporterClaim
    plural: addonsprometheusnodeexporterclaims
    singular: addonsprometheusnodeexporterclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsPrometheusNodeExporter is the Schema for the xaddonsprometheusnodeexporter API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/prometheus/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsprometheuss.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsPrometheus
    plural: xaddonsprometheuss
    singular: xaddonsprometheus
  claimNames:
    kind: AddonsPrometheusClaim
    plural: addonsprometheusclaims
    singular: addonsprometheusclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsPrometheus is the Schema for the xaddonsprometheus API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/trivy-operator/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonstrivyoperators.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsTrivyOperator
    plural: xaddonstrivyoperators
    singular: xaddonstrivyoperator
  claimNames:
    kind: AddonsTrivyOperatorClaim
    plural: addonstrivyoperatorclaims
    singular: addonstrivyoperatorclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsTrivyOperator is the Schema for the xaddonstrivyoperator API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/trust-manager/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonstrustmanagers.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsTrustManager
    plural: xaddonstrustmanagers
    singular: xaddonstrustmanager
  claimNames:
    kind: AddonsTrustManagerClaim
    plural: addonstrustmanagerclaims
    singular: addonstrustmanagerclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsTrustManager is the Schema for the xaddonstrustmanager API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/victoria-metrics-agent/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsvictoriametricsagents.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsVictoriaMetricsAgent
    plural: xaddonsvictoriametricsagents
    singular: xaddonsvictoriametricsagent
  claimNames:
    kind: AddonsVictoriaMetricsAgentClaim
    plural: addonsvictoriametricsagentclaims
    singular: addonsvictoriametricsagentclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsVictoriaMetricsAgent is the Schema for the xaddonsvictoriametricsagent API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alert-rules/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsvictoriametricsalertruless.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsVictoriaMetricsAlertRules
    plural: xaddonsvictoriametricsalertruless
    singular: xaddonsvictoriametricsalertrules
  claimNames:
    kind: AddonsVictoriaMetricsAlertRulesClaim
    plural: addonsvictoriametricsalertrulesclaims
    singular: addonsvictoriametricsalertrulesclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsVictoriaMetricsAlertRules is the Schema for the xaddonsvictoriametricsalertrules API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alert/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsvictoriametricsalerts.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsVictoriaMetricsAlert
    plural: xaddonsvictoriametricsalerts
    singular: xaddonsvictoriametricsalert
  claimNames:
    kind: AddonsVictoriaMetricsAlertClaim
    plural: addonsvictoriametricsalertclaims
    singular: addonsvictoriametricsalertclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsVictoriaMetricsAlert is the Schema for the xaddonsvictoriametricsalert API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alertmanager/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsvictoriametricsalertmanagers.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsVictoriaMetricsAlertmanager
    plural: xaddonsvictoriametricsalertmanagers
    singular: xaddonsvictoriametricsalertmanager
  claimNames:
    kind: AddonsVictoriaMetricsAlertmanagerClaim
    plural: addonsvictoriametricsalertmanagerclaims
    singular: addonsvictoriametricsalertmanagerclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsVictoriaMetricsAlertmanager is the Schema for the xaddonsvictoriametricsalertmanager API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/addons/victoria-metrics-operator/compositeResourceDefinition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xaddonsvictoriametricsoperators.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XAddonsVictoriaMetricsOperator
    plural: xaddonsvictoriametricsoperators
    singular: xaddonsvictoriametricsoperator
  claimNames:
    kind: AddonsVictoriaMetricsOperatorClaim
    plural: addonsvictoriametricsoperatorclaims
    singular: addonsvictoriametricsoperatorclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XAddonsVictoriaMetricsOperator is the Schema for the xaddonsvictoriametricsoperator API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                argocd:
                  type: object
                  properties:
                    destination:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The name of the destination.
                        namespace:
                          type: string
                          description: The namespace of the destination.
                    namespace:
                      type: string
                      description: The namespace of the argocd application.
                    project:
                      type: string
                      description: The project of the argocd application.
                    releaseName:
                      type: string
                      description: The release name of the argocd application.
                    trackingID:
                      type: string
                      description: The tracking ID of the argocd application.
                cluster:
                  type: object
                  description: Defines the name of Cluster.
                  properties:
                    name:
                      type: string
                      description: The name of the cluster.
                    host:
                      type: string
                      description: The host of the cluster.
                    port:
                      type: integer
                      description: The port of the cluster.
                    xcluster:
                      type: string
                      description: Defines the name of XCluster.
                providerConfigRef:
                  type: object
                  properties:
                    name:
                      type: string
                      description: The name of the provider config.
                values:
                  type: object
                  x-kubernetes-preserve-unknown-fields: true
                version:
                  type: string
                  description: The version of the addon.
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
              properties:
                health:
                  type: string
                  description: The health status of the addon.
                deployed:
                  type: string
                  description: The deployed status of the addon.
---
# Source: crossplane-functions/templates/xcertificate/compositeResourceDefinition.XCertificate.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xcertificates.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XCertificate
    plural: xcertificates
    singular: xcertificate
    shortNames:
      - xcert
  claimNames:
    kind: CertificateClaim
    plural: certificateclaims
    singular: certificateclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XCertificate is the Schema for the xcertificates API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
---
# Source: crossplane-functions/templates/xcertificateset/compositeResourceDefinition.XCertificate.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xcertificatesets.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XCertificateSet
    plural: xcertificatesets
    singular: xcertificateset
    shortNames:
      - xcertset
  claimNames:
    kind: CertificateSetClaim
    plural: certificatesetclaims
    singular: certificatesetclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XCertificateSet is the Schema for the xcertificatesets API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
---
# Source: crossplane-functions/templates/xclusterComponents/compositeResourceDefinition.XClusterComponents.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: CompositeResourceDefinition
metadata:
  name: xclustercomponents.in-cloud.io
spec:
  group: in-cloud.io
  names:
    kind: XClusterComponent
    plural: xclustercomponents
    singular: xclustercomponent
  claimNames:
    kind: XClusterComponentsClaim
    plural: xclustercomponentclaims
    singular: xclustercomponentclaim
  versions:
    - name: v1alpha1
      referenceable: true
      served: true
      schema:
        openAPIV3Schema:
          description: XClusterComponents is the Schema for the xclustercomponents API.
          type: object
          required:
            - spec
          properties:
            metadata:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            spec:
              type: object
              x-kubernetes-preserve-unknown-fields: true
            status:
              type: object
              x-kubernetes-preserve-unknown-fields: true
---
# Source: crossplane-functions/templates/addons/argocd/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsargocdclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsArgocd
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsargocd-environment

    - step: set-environment-addons-argocd
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-argocd-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "argocd" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "argocdApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "argocdApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "argocdApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            argo-cd:
              crds:
                install: true
              global:
                deploymentStrategy:
                  type: Recreate
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                  - key: "node-role.kubernetes.io/master"
                    operator: "Exists"
                    effect: "NoSchedule"
              configs:
                cm:
                  application.resourceTrackingMethod: annotation
                  reposerver.default.cache.expiration: 8h0m0s
                  reposerver.repo.cache.expiration: 8h0m0s
                  resource.compareoptions: |
                    ignoreAggregatedRoles: true
                  resource.customizations: |
                    "*.upbound.io/*":
                      health.lua: |
                        health_status = {
                          status = "Progressing",
                          message = "Provisioning ..."
                        }
            
                        local function contains (table, val)
                          for i, v in ipairs(table) do
                            if v == val then
                              return true
                            end
                          end
                          return false
                        end
            
                        local has_no_status = {
                          "ProviderConfig",
                          "ProviderConfigUsage"
                        }
            
                        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                          health_status.status = "Healthy"
                          health_status.message = "Resource is up-to-date."
                          return health_status
                        end
            
                        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                          if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                            health_status.status = "Healthy"
                            health_status.message = "Resource is in use."
                            return health_status
                          end
                          return health_status
                        end
            
                        for i, condition in ipairs(obj.status.conditions) do
                          if condition.type == "LastAsyncOperation" then
                            if condition.status == "False" then
                              health_status.status = "Degraded"
                              health_status.message = condition.message
                              return health_status
                            end
                          end
            
                          if condition.type == "Synced" then
                            if condition.status == "False" then
                              health_status.status = "Degraded"
                              health_status.message = condition.message
                              return health_status
                            end
                          end
            
                          if condition.type == "Ready" then
                            if condition.status == "True" then
                              health_status.status = "Healthy"
                              health_status.message = "Resource is up-to-date."
                              return health_status
                            end
                          end
                        end
            
                        return health_status
            
                    "*.crossplane.io/*":
                      health.lua: |
                        health_status = {
                          status = "Progressing",
                          message = "Provisioning ..."
                        }
            
                        local function contains (table, val)
                          for i, v in ipairs(table) do
                            if v == val then
                              return true
                            end
                          end
                          return false
                        end
            
                        local has_no_status = {
                          "Composition",
                          "CompositionRevision",
                          "DeploymentRuntimeConfig",
                          "ControllerConfig",
                          "ProviderConfig",
                          "ProviderConfigUsage"
                        }
                        if obj.status == nil or next(obj.status) == nil and contains(has_no_status, obj.kind) then
                            health_status.status = "Healthy"
                            health_status.message = "Resource is up-to-date."
                          return health_status
                        end
            
                        if obj.status == nil or next(obj.status) == nil or obj.status.conditions == nil then
                          if obj.kind == "ProviderConfig" and obj.status.users ~= nil then
                            health_status.status = "Healthy"
                            health_status.message = "Resource is in use."
                            return health_status
                          end
                          return health_status
                        end
            
                        for i, condition in ipairs(obj.status.conditions) do
                          if condition.type == "LastAsyncOperation" then
                            if condition.status == "False" then
                              health_status.status = "Degraded"
                              health_status.message = condition.message
                              return health_status
                            end
                          end
            
                          if condition.type == "Synced" then
                            if condition.status == "False" then
                              health_status.status = "Degraded"
                              health_status.message = condition.message
                              return health_status
                            end
                          end
            
                          if contains({"Ready", "Healthy", "Offered", "Established"}, condition.type) then
                            if condition.status == "True" then
                              health_status.status = "Healthy"
                              health_status.message = "Resource is up-to-date."
                              return health_status
                            end
                          end
                        end
            
                        return health_status
                  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration: |
                    jqPathExpressions:
                    - '.webhooks[]?.clientConfig.caBundle'
                  resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration: |
                    jqPathExpressions:
                    - '.webhooks[]?.clientConfig.caBundle'
                  resource.customizations.ignoreDifferences.all: |
                    jqPathExpressions:
                    - '.spec.template.spec.containers[].volumeMounts[] | select(.name == "ssl-certs")'
                    - '.spec.template.spec.volumes[] | select(.name == "ssl-certs")'
                    - '.spec.template.spec.securityContext'
                    - '.spec.template.spec.containers[].securityContext'
                    - '.spec.template.spec.initContainers[].securityContext'
                    - '.spec.replicas'
                  resource.customizations.ignoreDifferences.kyverno.io_ClusterPolicy: |
                    jqPathExpressions:
                    - '.spec.rules[] | select(.name|test("autogen-."))'
                  resource.customizations.ignoreDifferences.kyverno.io_Policy: |
                    jqPathExpressions:
                    - '.spec.rules[] | select(.name|test("autogen-."))'
                  timeout.reconciliation: 10s
                  timeout.reconciliation.jitter: 10s
                cmp:
                  create: true
                params:
                  application.namespaces: '*'
                  applicationsetcontroller.allowed.scm.providers: https://gitlab.beget.ru
                  applicationsetcontroller.namespaces: '*'
                  repo.server: 127.0.0.1:8081
                  redis.server: 127.0.0.1:6379
                  controller.sharding.algorithm: round-robin
                  server.basehref: /argocd
                  server.rootpath: /argocd
                  server.staticassets: /shared/app
                secret:
                  argocdServerAdminPassword: "$2a$10$3MqvSHzzSj38YYNFDrkolONgKe9ejuphtk1Qe5gWNdm9ILVQYUOma"
              dex:
                enabled: false
              notifications:
                enabled: false
              redis-ha:
                enabled: false
              redis:
                enabled: true
                image:
                  imagePullPolicy: IfNotPresent
                replicas: 1
                hostNetwork: true
                exporter:
                  enabled: true
                  resources:
                    limits:
                      cpu: 200m
                      ephemeral-storage: 10Mi
                      memory: 128Mi
                    requests:
                      cpu: 100m
                      ephemeral-storage: 10Mi
                      memory: 64Mi
                resources:
                  limits:
                    cpu: 200m
                    ephemeral-storage: 100Mi
                    memory: 196Mi
                  requests:
                    cpu: 100m
                    ephemeral-storage: 100Mi
                    memory: 128Mi
              redisSecretInit:
                enabled: true
                image:
                  imagePullPolicy: IfNotPresent
                hostNetwork: true
                extraArgs:
                  - --kubeconfig
                  - /etc/kubernetes/admin.conf
                volumes:
                  - hostPath:
                      path: /etc/kubernetes/admin.conf
                      type: FileOrCreate
                    name: admin-conf
                volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: admin-conf
                containerSecurityContext:
                  runAsNonRoot: false
                  runAsUser: 0
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities:
                    drop:
                      - ALL
                  seccompProfile:
                    type: RuntimeDefault
                resources:
                  limits:
                    cpu: 20m
                    ephemeral-storage: 10Mi
                    memory: 64Mi
                  requests:
                    cpu: 10m
                    ephemeral-storage: 10Mi
                    memory: 32Mi
              repoServer:
                image:
                  imagePullPolicy: IfNotPresent
                hostNetwork: true
                containerSecurityContext:
                  runAsNonRoot: false
                  runAsUser: 0
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities:
                    drop:
                      - ALL
                  seccompProfile:
                    type: RuntimeDefault
                emptyDir:
                  sizeLimit: 10Gi
                metrics:
                  enabled: true
                rbac:
                - apiGroups:
                  - '*'
                  resources:
                  - '*'
                  verbs:
                  - '*'
                replicas: 1
                resources:
                  limits:
                    ephemeral-storage: 1Gi
                    memory: 1Gi
                  requests:
                    cpu: 100m
                    ephemeral-storage: 1Gi
                    memory: 150Mi
                affinity:
                  podAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: argocd-redis
                        topologyKey: kubernetes.io/hostname
              server:
                image:
                  imagePullPolicy: IfNotPresent
                hostNetwork: true
                containerSecurityContext:
                  runAsNonRoot: false
                  runAsUser: 0
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities:
                    drop:
                      - ALL
                  seccompProfile:
                    type: RuntimeDefault
                extraArgs:
                  - --repo-server
                  - 127.0.0.1:8081
                  - --redis
                  - 127.0.0.1:6379
                  - --kubeconfig
                  - /etc/kubernetes/admin.conf
                volumes:
                  - hostPath:
                      path: /etc/kubernetes/admin.conf
                      type: FileOrCreate
                    name: admin-conf
                volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: admin-conf
                emptyDir:
                  sizeLimit: 500Mi
                ingress:
                  enabled: false
                metrics:
                  enabled: true
                replicas: 1
                resources:
                  limits:
                    ephemeral-storage: 100Mi
                  requests:
                    cpu: 50m
                    ephemeral-storage: 100Mi
                    memory: 64Mi
                affinity:
                  podAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: argocd-redis
                        topologyKey: kubernetes.io/hostname
              controller:
                image:
                  imagePullPolicy: IfNotPresent
                hostNetwork: true
                containerSecurityContext:
                  runAsNonRoot: false
                  runAsUser: 0
                  allowPrivilegeEscalation: false
                  readOnlyRootFilesystem: true
                  capabilities:
                    drop:
                      - ALL
                  seccompProfile:
                    type: RuntimeDefault
                extraArgs:
                  - --repo-server
                  - 127.0.0.1:8081
                  - --redis
                  - 127.0.0.1:6379
                  - --kubeconfig
                  - /etc/kubernetes/admin.conf
                volumes:
                  - hostPath:
                      path: /etc/kubernetes/admin.conf
                      type: FileOrCreate
                    name: admin-conf
                volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: admin-conf
                emptyDir:
                  sizeLimit: 500Mi
                metrics:
                  enabled: true
                replicas: 1
                resources:
                  limits:
                    ephemeral-storage: 500Mi
                  requests:
                    cpu: 100m
                    ephemeral-storage: 500Mi
                    memory: 64Mi
                affinity:
                  podAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: argocd-redis
                        topologyKey: kubernetes.io/hostname
              applicationSet:
                replicas: 0
                image:
                  imagePullPolicy: IfNotPresent
                allowAnyNamespace: true
                emptyDir:
                  sizeLimit: 500Mi
                metrics:
                  enabled: true
                resources:
                  limits:
                    cpu: 400m
                    ephemeral-storage: 100Mi
                    memory: 256Mi
                  requests:
                    cpu: 10m
                    ephemeral-storage: 100Mi
                    memory: 32Mi
                affinity:
                  podAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      - labelSelector:
                          matchLabels:
                            app.kubernetes.io/name: argocd-redis
                        topologyKey: kubernetes.io/hostname
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: argocdApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: .
                      repoURL: https://gitlab.beget.ru/cloud/k8s/charts/argocd-infra-advanced.git
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: argocdApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/beget-provider/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsbegetcmproviderclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsBegetCmProvider
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsbegetcmprovider-environment

    - step: set-environment-addons-begetcmprovider
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-begetcmprovider-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "beget-cm-provider" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "begetCmProviderApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "begetCmProviderApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "begetCmProviderApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: begetCmProviderApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: .
                      repoURL: https://gitlab.beget.ru/cloud/k8s/charts/capi-provider-beget-controller-manager.git
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: begetCmProviderApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/capi-kubeadm-bootstrap/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscapikubeadmbootstrapclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCapiKubeadmBootstrap
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscapikubeadmbootstrap-environment

    - step: set-environment-addons-capikubeadmbootstrap
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-capikubeadmbootstrap-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "capi-kubeadm-bootstrap" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "capiKubeadmBootstrapApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "capiKubeadmBootstrapApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "capiKubeadmBootstrapApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: capiKubeadmBootstrapApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/capi-kubeadm-bootstrap
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: capiKubeadmBootstrapApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/capi-kubeadm-control-plane/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscapikubeadmcontrolplaneclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCapiKubeadmControlPlane
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscapikubeadmcontrolplane-environment

    - step: set-environment-addons-capikubeadmcontrolplane
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-capikubeadmcontrolplane-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "capi-kubeadm-control-plane" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "capiKubeadmControlPlaneApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "capiKubeadmControlPlaneApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "capiKubeadmControlPlaneApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: capiKubeadmControlPlaneApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/capi-kubeadm-control-plane
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: capiKubeadmControlPlaneApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/capi/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscapiclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCapi
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscapi-environment

    - step: set-environment-addons-capi
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-capi-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "capi" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "capiApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "capiApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "capiApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: capiApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/capi
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: capiApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/ccm/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsccmclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCcm
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsccm-environment

    - step: set-environment-addons-ccm
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-ccm-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "ccm" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "ccmApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "ccmApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "ccmApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            appSpec:
              applications:
                cloudControllerManager:
                  enabled: true
                  imagePullSecrets: []
                  containers:
                    manager:
                      extraEnv:
                        CLUSTER_NAME: {{ .clusterName }}
                        CLUSTER_NAMESPACE: {{ .argocdDestinationNamespace }}
                      # image:
                      #   tag: latest
                      #   pullPolicy: Always
                      extraArgs:
                        v: 3
                  volumes:
                    secret-ccm-kubeconfig:
                      volume:
                        mode: secret
                        secretName: {{ .clusterName }}-kubeconfig
                        items:
                        - key: value
                          path: kubeconfig
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: ccmApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: .
                      repoURL: https://gitlab.beget.ru/cloud/k8s/charts/beget-cloud-controller-manager-chart.git
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: ccmApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/cert-manager-csi-driver/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscertmanagercsidriverclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCertManagerCsiDriver
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscertmanagercsidriver-environment

    - step: set-environment-addons-certmanagercsidriver
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-certmanagercsidriver-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "cert-manager-csi-driver" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "certManagerCsiDriverApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "certManagerCsiDriverApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "certManagerCsiDriverApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            cert-manager-csi-driver:
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
              resources:
                limits:
                  cpu: 200m
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: certManagerCsiDriverApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/certmanager-csi-driver
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: certManagerCsiDriverApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/cert-manager/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscertmanagerclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCertManager
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscertmanager-environment

    - step: set-environment-addons-certmanager
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-certmanager-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "cert-manager" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "certManagerApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "certManagerApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "certManagerApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            cert-manager:
              global:
                priorityClassName: system-cluster-critical
              cainjector:
                containerSecurityContext:
                  runAsNonRoot: true
                resources:
                  limits:
                    cpu: 250m
                    memory: 256Mi
                  requests:
                    cpu: 50m
                    memory: 128Mi
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                  - key: "node-role.kubernetes.io/master"
                    operator: "Exists"
                    effect: "NoSchedule"
              containerSecurityContext:
                runAsNonRoot: true
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
              resources:
                limits:
                  cpu: 200m
                  memory: 256Mi
                requests:
                  cpu: 100m
                  memory: 128Mi
              startupapicheck:
                containerSecurityContext:
                  runAsNonRoot: true
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                  - key: "node-role.kubernetes.io/master"
                    operator: "Exists"
                    effect: "NoSchedule"
              webhook:
                containerSecurityContext:
                  runAsNonRoot: true
                resources:
                  limits:
                    cpu: 200m
                    memory: 256Mi
                  requests:
                    cpu: 50m
                    memory: 128Mi
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                  - key: "node-role.kubernetes.io/master"
                    operator: "Exists"
                    effect: "NoSchedule"
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            cert-manager:
              installCRDs: true
              enableCertificateOwnerRef: true
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: certManagerApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/certmanager
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: certManagerApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/cilium/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsciliumclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCilium
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscilium-environment

    - step: set-environment-addons-cilium
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-cilium-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "cilium" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "ciliumApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "ciliumApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "ciliumApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            cilium:
              image:
                pullPolicy: IfNotPresent
              envoy:
                enabled: false
              hubble:
                enabled: false
              kubeProxyReplacement: true
              nodePort:
                enabled: true
              operator:
                replicas: 1
                image:
                  pullPolicy: IfNotPresent
              myDefault: test1
              dnsPolicy: ClusterFirstWithHostNet
              prometheus:
                metricsService: true
                enabled: true
              resources:
                requests:
                  cpu: 100m
                  memory: 100Mi
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            cilium:
              k8sServiceHost: {{ .host }}
              k8sServicePort: {{ .port }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: ciliumApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    ignoreDifferences:
                    - group: admissionregistration.k8s.io
                      jqPathExpressions:
                      - .spec.ports[]?.nodePort
                      kind: Service
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/cilium
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: ciliumApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/coredns/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscorednsclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCoredns
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscoredns-environment

    - step: set-environment-addons-coredns
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-coredns-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "coredns" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "corednsApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "corednsApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "corednsApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            coredns:
              isClusterService: true
              serviceType: ClusterIP
              priorityClassName: system-cluster-critical
              prometheus:
                service:
                  enabled: true
              replicaCount: 3
              resources:
                limits:
                  cpu: 200m
                  memory: 256Mi
                requests:
                  cpu: 100m
              rollingUpdate:
                maxSurge: 35%
              securityContext:
                runAsNonRoot: false
                readOnlyRootFilesystem: true
                runAsUser: 0
              serviceAccount:
                create: true
                name: coredns
              affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                        - coredns
                      - key: app.kubernetes.io/instance
                        operator: In
                        values:
                        - coredns
                    topologyKey: kubernetes.io/hostname
                  weight: 100
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            coredns:
              service:
                clusterIP: 29.64.0.10
              servers:
                - zones:
                    - zone: cluster.local.
                  port: 53
                  plugins:
                    - name: kubernetes
                      parameters: cluster.local in-addr.arpa ip6.arpa
                      configBlock: |-
                        pods verified 
                        fallthrough in-addr.arpa ip6.arpa
                        ttl 30
                    - name: transfer
                      configBlock: |-
                        to *
                    - name: loop
                    - name: reload
                    - name: errors
                    - name: ready
                    - name: loadbalance
                      parameter: round_robin
                    - name: forward
                      parameters: . /etc/resolv.conf
                    - name: cache
                      parameters: 30
                    - name: prometheus
                      parameters: 0.0.0.0:9153
                    - name: log
                      configBlock: |-
                        class all
            
                    - name: health
                      configBlock: |-
                        lameduck 5s
                - zones:
                    - zone: .
                  port: 53
                  plugins:
                    - name: loop
                    - name: reload
                    - name: errors
                    - name: ready
                    - name: loadbalance
                      parameter: round_robin
                    - name: forward
                      parameters: . 198.18.18.18
                      configBlock: |-
                        force_tcp
                    - name: cache
                      parameters: 30
                    - name: prometheus
                      parameters: 0.0.0.0:9153
                    - name: log
                      configBlock: |-
                        class all
                    - name: health
                      configBlock: |-
                        lameduck 5s
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: corednsApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/coredns
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: corednsApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/crossplane-compositions/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscrossplanecompositionsclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCrossplaneCompositions
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscrossplanecompositions-environment

    - step: set-environment-addons-crossplanecompositions
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-crossplanecompositions-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "crossplane-compositions" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "crossplaneCompositionsApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "crossplaneCompositionsApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "crossplaneCompositionsApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: crossplaneCompositionsApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/crossplane-compositions
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: feat/crossplane
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: crossplaneCompositionsApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/crossplane-functions/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscrossplanefunctionsclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCrossplaneFunctions
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscrossplanefunctions-environment

    - step: set-environment-addons-crossplanefunctions
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-crossplanefunctions-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "crossplane-functions" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "crossplaneFunctionsApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "crossplaneFunctionsApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "crossplaneFunctionsApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: crossplaneFunctionsApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/crossplane-functions
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: feat/crossplane
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: crossplaneFunctionsApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/crossplane-xcluster/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscrossplanexclusterclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCrossplaneXcluster
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscrossplanexcluster-environment

    - step: set-environment-addons-crossplanexcluster
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-crossplanexcluster-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "crossplane-xcluster" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "crossplaneXclusterApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "crossplaneXclusterApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "crossplaneXclusterApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: crossplaneXclusterApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: .
                      repoURL: https://gitlab.beget.ru/cloud/k8s/charts/crossplane-xcluster.git
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: crossplaneXclusterApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/crossplane/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscrossplaneclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCrossplane
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscrossplane-environment

    - step: set-environment-addons-crossplane
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-crossplane-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "crossplane" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "crossplaneApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "crossplaneApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "crossplaneApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            args:
              - '--enable-composition-webhook-schema-validation'
              - '--enable-composition-functions'
              - '--enable-usages'
              - '--poll-interval=10s'
            extraObjects:
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  name: crossplane-namespace-admin
                rules:
                  - apiGroups:
                      - ''
                    resources:
                      - namespaces
                    verbs:
                      - '*'
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: crossplane-namespace-admin
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: crossplane-namespace-admin
                subjects:
                  - kind: ServiceAccount
                    name: crossplane
                    namespace: beget-crossplane
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  name: crossplane-xclusters-admin
                rules:
                  - apiGroups:
                      - cluster.x-k8s.io
                    resources:
                      - xclusters
                      - clusterclaims
                    verbs:
                      - '*'
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: crossplane-xclusters-admin
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: crossplane-xclusters-admin
                subjects:
                  - kind: ServiceAccount
                    name: crossplane
                    namespace: beget-crossplane
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  name: crossplane-clusters-admin
                rules:
                  - apiGroups:
                      - cluster.x-k8s.io
                    resources:
                      - clusters
                    verbs:
                      - '*'
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRole
                metadata:
                  name: crossplane-argocd-admin
                rules:
                  - apiGroups:
                      - argoproj.io
                    resources:
                      - '*'
                    verbs:
                      - '*'
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: crossplane-argocd-admin
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: crossplane-argocd-admin
                subjects:
                  - kind: ServiceAccount
                    name: crossplane
                    namespace: beget-crossplane
              - apiVersion: rbac.authorization.k8s.io/v1
                kind: ClusterRoleBinding
                metadata:
                  name: crossplane-cluster-admin
                roleRef:
                  apiGroup: rbac.authorization.k8s.io
                  kind: ClusterRole
                  name: cluster-admin
                subjects:
                  - kind: ServiceAccount
                    name: crossplane
                    namespace: beget-crossplane
            resourcesCrossplane:
              limits:
                cpu: 750m
                memory: 2048Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: crossplaneApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: crossplane
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://charts.crossplane.io/stable
                      targetRevision: 1.19.1
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: crossplaneApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/csrc/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonscsrcclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsCsrc
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonscsrc-environment

    - step: set-environment-addons-csrc
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-csrc-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "csrc" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "csrcApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "csrcApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "csrcApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            appSpec:
              applications:
                csrControllerManager:
                  enabled: true
                  # imagePullSecrets: []
                  containers:
                    manager:
                      extraArgs:
                        cluster-name: {{ .clusterName }}
                        cluster-namespace: {{ .argocdDestinationNamespace }}
                      # image:
                      #   tag: rc1
                      #   pullPolicy: Always
                  volumes:
                    secret-ccm-kubeconfig:
                      volume:
                        mode: secret
                        secretName: {{ .clusterName }}-kubeconfig
                        items:
                        - key: value
                          path: kubeconfig
                  service:
                    enabled: true
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: csrcApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: .
                      repoURL: https://gitlab.beget.ru/cloud/k8s/charts/beget-certificate-signing-request-controller-chart
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: csrcApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/dex/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsdexclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsDex
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsdex-environment

    - step: set-environment-addons-dex
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-dex-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "dex" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "dexApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "dexApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "dexApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            dex:
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: dexApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/dex
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: dexApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/etcd-backups/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsetcdbackupclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsEtcdBackup
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsetcdbackup-environment

    - step: set-environment-addons-etcdbackup
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-etcdbackup-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "etcd-backup" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "etcdBackupApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "etcdBackupApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "etcdBackupApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: etcdBackupApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/etcd-backup-snapshot
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: etcdBackupApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/grafana-dashboards/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsgrafanadashboardsclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsGrafanaDashboards
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsgrafanadashboards-environment

    - step: set-environment-addons-grafanadashboards
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-grafanadashboards-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "grafana-dashboards" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "grafanaDashboardsApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "grafanaDashboardsApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "grafanaDashboardsApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            grafana-dashboards:
              argocd:
                enabled: false
              ciliumAgent:
                enabled: false
              cpu:
                enabled: false
              processLA:
                enabled: false
              processExporter:
                enabled: false
              metallb:
                enabled: false
              vector:
                enabled: false
              vmagent:
                enabled: false
              k8s:
                coredns:
                  enabled: false
                etcd:
                  enabled: false
                timex:
                  enabled: false
                viewsGlobal:
                  enabled: false
                viewsNamespaces:
                  enabled: false
                viewsNodes:
                  enabled: false
                viewsPods:
                  enabled: false
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            grafana-dashboards:
              k8s:
                apiserver:
                  enabled: true
                controlplane:
                  enabled: true
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: grafanaDashboardsApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/grafana-dashboards
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: grafanaDashboardsApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/grafana-operator/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsgrafanaoperatorclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsGrafanaOperator
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsgrafanaoperator-environment

    - step: set-environment-addons-grafanaoperator
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-grafanaoperator-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "grafana-operator" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "grafanaOperatorApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "grafanaOperatorApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "grafanaOperatorApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            grafana-operator:
              namespaceScope: false
              priorityClassName: system-cluster-critical
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
              resources:
                requests:
                  cpu: 50m
                  memory: 100Mi
                limits:
                  cpu: 500m
                  memory: 750Mi
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: grafanaOperatorApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/grafana-operator
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
                      - ServerSideApply=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: grafanaOperatorApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/grafana/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsgrafanaclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsGrafana
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsgrafana-environment

    - step: set-environment-addons-grafana
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-grafana-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "grafana" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "grafanaApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "grafanaApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "grafanaApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            grafana:
              name: grafana
              labels:
                app.kubernetes.io/name: grafana
              spec:
                config:
                  log:
                    mode: "console"
                  auth:
                    disable_login_form: "false"
                  security:
                    admin_user: "admin"
                    admin_password: "supersecret"
                deployment:
                  spec:
                    template:
                      spec:
                        containers:
                          - name: grafana
                            image: grafana/grafana:11.3.0
                            securityContext:
                              allowPrivilegeEscalation: true
                              readOnlyRootFilesystem: false
                            readinessProbe:
                              failureThreshold: 3
                            resources:
                              requests:
                                cpu: 100m
                                memory: 250Mi
                              limits:
                                cpu: 1
                                memory: 2Gi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: grafanaApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/grafana
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: grafanaApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/helm-inserter/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonshelminserterclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsHelmInserter
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonshelminserter-environment

    - step: set-environment-addons-helminserter
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-helminserter-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "helm-inserter" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "helmInserterApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "helmInserterApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "helmInserterApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: helmInserterApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: .
                      repoURL: https://gitlab.beget.ru/cloud/k8s/charts/helm-inserter.git
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: helmInserterApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/incloud-ui/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsinclouduiclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsIncloudUi
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsincloudui-environment

    - step: set-environment-addons-incloudui
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-incloudui-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "incloud-ui" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "incloudUiApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "incloudUiApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "incloudUiApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: incloudUiApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/incloud-ui
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: incloudUiApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/incloud-web-resources/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsincloudwebresourcesclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsIncloudWebResources
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsincloudwebresources-environment

    - step: set-environment-addons-incloudwebresources
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-incloudwebresources-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "incloud-web-resources" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "incloudWebResourcesApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "incloudWebResourcesApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "incloudWebResourcesApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: incloudWebResourcesApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/incloud-web-resources
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: incloudWebResourcesApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/istio-base/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsistiobaseclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsIstioBase
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsistiobase-environment

    - step: set-environment-addons-istiobase
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-istiobase-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "istio-base" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "istioBaseApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "istioBaseApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "istioBaseApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            global:
              istioNamespace: beget-istio
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: istioBaseApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    ignoreDifferences:
                    - group: admissionregistration.k8s.io
                      jsonPointers:
                      - /webhooks/0/failurePolicy
                      kind: ValidatingWebhookConfiguration
                    project: '{{ $argocdProject }}'
                    source:
                      chart: base
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://istio-release.storage.googleapis.com/charts
                      targetRevision: 1.26.0
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: istioBaseApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/istio-gw/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsistiogwclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsIstioGw
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsistiogw-environment

    - step: set-environment-addons-istiogw
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-istiogw-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "istio-gw" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "istioGwApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "istioGwApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "istioGwApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            gateway:
              priorityClassName: system-cluster-critical
              service:
                type: NodePort
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: istioGwApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    ignoreDifferences:
                    - group: admissionregistration.k8s.io
                      jsonPointers:
                      - /webhooks/0/failurePolicy
                      kind: ValidatingWebhookConfiguration
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/istio-gw
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: istioGwApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/istiod/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsistiodclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsIstiod
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsistiod-environment

    - step: set-environment-addons-istiod
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-istiod-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "istiod" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "istiodApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "istiodApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "istiodApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            istiod:
              base:
                validationCABundle: ""
              pilot:
                autoscaleMin: 2
                resources:
                  requests:
                    cpu: 100m
                    memory: 128Mi
                  # limits:
                  #   cpu: 1
                  #   memory: 2048Mi
              global:
                priorityClassName: system-cluster-critical
                istioNamespace: beget-istio
                proxy:
                  tracer: zipkin
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: istiodApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    ignoreDifferences:
                    - group: admissionregistration.k8s.io
                      jsonPointers:
                      - /webhooks/0/failurePolicy
                      kind: ValidatingWebhookConfiguration
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/istiod
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: istiodApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/konnectivity-agent/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonskonnectivityagentclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsKonnectivityAgent
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonskonnectivityagent-environment

    - step: set-environment-addons-konnectivityagent
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-konnectivityagent-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "konnectivity-agent" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "konnectivityAgentApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "konnectivityAgentApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "konnectivityAgentApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: konnectivityAgentApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/konnectivity-agent
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: feat/konnectivity
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: konnectivityAgentApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/konnectivity-server/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonskonnectivityserverclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsKonnectivityServer
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonskonnectivityserver-environment

    - step: set-environment-addons-konnectivityserver
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-konnectivityserver-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "konnectivity-server" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "konnectivityServerApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "konnectivityServerApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "konnectivityServerApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: konnectivityServerApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/konnectivity-server
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: konnectivityServerApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/kube-state-metrics/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonskubestatemetricsclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsKubeStateMetrics
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonskubestatemetrics-environment

    - step: set-environment-addons-kubestatemetrics
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-kubestatemetrics-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "kube-state-metrics" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "kubeStateMetricsApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "kubeStateMetricsApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "kubeStateMetricsApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            kube-state-metrics:
              kubeRBACProxy:
                enabled: false
              prometheusScrape: false
            
              prometheus:
                monitor:
                  enabled: false
            
              customLabels:
                in-cloud.io/clusterName: ""
            
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
            
              resources:
                limits:
                  cpu: 500m
                  memory: 512Mi
                requests:
                  cpu: 50m
                  memory: 128Mi
            
              priorityClassName: system-cluster-critical
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: kubeStateMetricsApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/kube-state-metrics
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: kubeStateMetricsApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/kubeadmResources/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonskubeadmresourcesclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsKubeadmResources
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonskubeadmresources-environment

    - step: set-environment-addons-kubeadmresources
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-kubeadmresources-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "kubeadm-resources" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "kubeadmResourcesApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "kubeadmResourcesApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "kubeadmResourcesApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            clusterInfo:
              clusterApiUrl: https://{{ .host }}:{{ .port }}
              clusterName: {{ .clusterName }}
            kubeadmConfig:
              namespace: kube-system
              clusterConfiguration:
                clusterName: {{ .clusterName }}
                controlPlaneEndpoint: {{ .host }}:{{ .port }}
            rbac:
              authExtraGroups: "system:bootstrappers:kubeadm:default-node-token"
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: kubeadmResourcesApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/kubeadm-resources-client-cp
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: kubeadmResourcesApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/metallb/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsmetallbclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsMetallb
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsmetallb-environment

    - step: set-environment-addons-metallb
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-metallb-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "metallb" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "metallbApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "metallbApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "metallbApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            metallb:
              controller:
                enabled: true
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                  - key: "node-role.kubernetes.io/master"
                    operator: "Exists"
                    effect: "NoSchedule"
                resources:
                  limits:
                    cpu: 150m
                    memory: 150Mi
                  requests:
                    cpu: 10m
                    memory: 10Mi
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            metallb:
              speaker:
                enabled: false
                frr:
                  enabled: false
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: metallbApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/metallb
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: metallbApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/metrics-server/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsmetricsserverclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsMetricsServer
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsmetricsserver-environment

    - step: set-environment-addons-metricsserver
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-metricsserver-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "metrics-server" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "metricsServerApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "metricsServerApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "metricsServerApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            metrics-server:
              metrics:
                enabled: true
              replicas: 1
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 250m
                  memory: 256Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: metricsServerApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/metrics-server
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: metricsServerApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/process-exporter/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsprocessexporterclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsProcessExporter
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsprocessexporter-environment

    - step: set-environment-addons-processexporter
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-processexporter-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "process-exporter" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "processExporterApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "processExporterApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "processExporterApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            prometheus-process-exporter:
              serviceAccount:
                name: prometheus-process-exporter
            
              image:
                repository: ncabatoff/process-exporter
                tag: 0.8.1
            
              service:
                type: ClusterIP
                port: 9101
                targetPort: 9101
                nodePort:
                annotations:
                  prometheus.io/scrape: "true"
            
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
            
              priorityClassName: system-cluster-critical
            
              resources:
                limits:
                  memory: 256Mi
                  cpu: 512m
                requests:
                  memory: 128Mi
                  cpu: 100m
            
              hostNetwork: true
            
              rbac:
                create: true
                pspEnabled: false
            
              templates:
                config.yml: |
                  process_names:
                    - name: "{{ "{{" }}.Comm{{ "}}" }}"
                      cmdline:
                      - '.+'
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: processExporterApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/process-exporter
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: processExporterApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/prometheus-adapter/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsprometheusadapterclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsPrometheusAdapter
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsprometheusadapter-environment

    - step: set-environment-addons-prometheusadapter
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-prometheusadapter-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "prometheus-adapter" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "prometheusAdapterApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "prometheusAdapterApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "prometheusAdapterApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            prometheus:
              url: http://prometheus-server.beget-prometheus.svc
              port: 80
            rules:
              resource:
                cpu:
                  containerQuery: |
                    sum by (<<.GroupBy>>) (
                      rate(container_cpu_usage_seconds_total{container!="",<<.LabelMatchers>>}[3m])
                    )
                  nodeQuery: |
                    sum  by (<<.GroupBy>>) (
                      rate(node_cpu_seconds_total{mode!="idle",mode!="iowait",mode!="steal",<<.LabelMatchers>>}[3m])
                    )
                  resources:
                    overrides:
                      node:
                        resource: node
                      namespace:
                        resource: namespace
                      pod:
                        resource: pod
                  containerLabel: container
                memory:
                  containerQuery: |
                    sum by (<<.GroupBy>>) (
                      avg_over_time(container_memory_working_set_bytes{container!="",<<.LabelMatchers>>}[3m])
                    )
                  nodeQuery: |
                    sum by (<<.GroupBy>>) (
                      avg_over_time(node_memory_MemTotal_bytes{<<.LabelMatchers>>}[3m])
                      -
                      avg_over_time(node_memory_MemAvailable_bytes{<<.LabelMatchers>>}[3m])
                    )
                  resources:
                    overrides:
                      node:
                        resource: node
                      namespace:
                        resource: namespace
                      pod:
                        resource: pod
                  containerLabel: container
                window: 3m
            replicas: 1
            tolerations:
              - key: "node-role.kubernetes.io/control-plane"
                operator: "Exists"
                effect: "NoSchedule"
              - key: "node-role.kubernetes.io/master"
                operator: "Exists"
                effect: "NoSchedule"
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: prometheusAdapterApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: prometheus-adapter
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://prometheus-community.github.io/helm-charts
                      targetRevision: 4.14.1
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: prometheusAdapterApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/prometheus-node-exporter/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsprometheusnodeexporterclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsPrometheusNodeExporter
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsprometheusnodeexporter-environment

    - step: set-environment-addons-prometheusnodeexporter
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-prometheusnodeexporter-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "prometheus-node-exporter" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "prometheusNodeExporterApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "prometheusNodeExporterApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "prometheusNodeExporterApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            prometheus-node-exporter:
              service:
                enabled: true
                port: 9100
                labels:
                  beget.com/prometheus-job: node-exporter
              tolerations:
                - key: "node-role.kubernetes.io/control-plane"
                  operator: "Exists"
                  effect: "NoSchedule"
                - key: "node-role.kubernetes.io/master"
                  operator: "Exists"
                  effect: "NoSchedule"
              containerSecurityContext:
                runAsNonRoot: true
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
              resources:
                requests:
                  cpu: 100m
                  memory: 128Mi
                limits:
                  cpu: 512m
                  memory: 256Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: prometheusNodeExporterApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/prometheus-node-exporter
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: prometheusNodeExporterApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/prometheus/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsprometheusclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsPrometheus
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsprometheus-environment

    - step: set-environment-addons-prometheus
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-prometheus-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "prometheus" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "prometheusApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "prometheusApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "prometheusApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            prometheus:
              server:
                persistentVolume:
                  enabled: false
                emptyDir:
                  sizeLimit: "500Mi"
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                  - key: "node-role.kubernetes.io/master"
                    operator: "Exists"
                    effect: "NoSchedule"
                resources:
                  limits:
                    cpu: 512m
                    memory: 768Mi
                  requests:
                    cpu: 100m
                    memory: 128Mi
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            prometheus:
              server:
                image:
                  repository: prompp/prompp
                  tag: "2.53.2-0.3.1"
              alertmanager:
                enabled: false
              prometheus-node-exporter:
                enabled: false
              kube-state-metrics:
                enabled: false
              prometheus-pushgateway:
                enabled: false
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: prometheusApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/prometheus
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: prometheusApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/trivy-operator/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonstrivyoperatorclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsTrivyOperator
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonstrivyoperator-environment

    - step: set-environment-addons-trivyoperator
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-trivyoperator-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "trivy-operator" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "trivyOperatorApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "trivyOperatorApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "trivyOperatorApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            trivy-operator:
              trivy:
                storageClassEnabled: false
                severity: HIGH,CRITICAL
                resources:
                  requests:
                    cpu: 100m
                    memory: 128M
                  limits:
                    cpu: 750m
                    memory: 750M
                server:
                  resources:
                    requests:
                      cpu: 100m
                      memory: 128Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: trivyOperatorApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/trivy-operator
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: trivyOperatorApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/trust-manager/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonstrustmanagerclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsTrustManager
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonstrustmanager-environment

    - step: set-environment-addons-trustmanager
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-trustmanager-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "trust-manager" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "trustManagerApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "trustManagerApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "trustManagerApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            trust-manager:
              resources:
                requests:
                  cpu: 50m
                  memory: 128Mi
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: trustManagerApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      path: helm-chart-sources/trustmanager
                      repoURL: https://github.com/LTD-Beget/kaas-helm-charts
                      targetRevision: HEAD
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: trustManagerApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/victoria-metrics-agent/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsvictoriametricsagentclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsVictoriaMetricsAgent
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsvictoriametricsagent-environment

    - step: set-environment-addons-victoriametricsagent
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-victoriametricsagent-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "victoria-metrics-agent" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "victoriaMetricsAgentApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "victoriaMetricsAgentApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "victoriaMetricsAgentApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            vmagent:
              ingress:
                enabled: false
              spec:
                imagePullSecrets: []
                resources:
                  requests:
                    cpu: "100m"
                    memory: "128Mi"
                  limits:
                    cpu: "500m"
                    memory: "500Mi"
                securityContext:
                  readOnlyRootFilesystem: true
                  allowPrivilegeEscalation: false
                containers:
                  - name: config-reloader
                    requests:
                      cpu: 100m
                      memory: 128Mi
                    limits:
                      cpu: 100m
                      memory: 200Mi
                    securityContext:
                      runAsNonRoot: true
                      runAsUser: 65534
                  - name: vmagent
                    securityContext:
                      readOnlyRootFilesystem: true
                      allowPrivilegeEscalation: false
                extraEnvs:
                  - name: GOMAXPROCS
                    value: '1'
                extraArgs:
                  remoteWrite.tlsInsecureSkipVerify: "true"
                  remoteWrite.label: remotewrite_cluster=cluster #namespace-cluster_name
                  promscrape.streamParse: "true"
                  promscrape.maxScrapeSize: "100000000"
                  remoteWrite.shardByURL: "true"
                  remoteWrite.shardByURLReplicas: "3"
                replicaCount: 1
                shardCount: 1
                updateStrategy: RollingUpdate
                rollingUpdate:
                  maxSurge: 10%
                  maxUnavailable: 0
                remoteWriteSettings:
                  queues: 24
                statefulMode: false
                # TODO: для шардирования нужно научиться добавлять кастомные метки для скрейперов
                serviceScrapeSelector: {}
                # matchLabels:
                #   incloud-metrics: "infra"
                serviceScrapeNamespaceSelector: {}
                  # matchExpressions:
                  #   - operator: In
                  #     key: "incloud.io/components"
                  #     values: ["infra"]
                podScrapeSelector: {}
                # matchLabels:
                #   incloud-metrics: "infra"
                podScrapeNamespaceSelector: {}
                  # matchExpressions:
                  #   - operator: In
                  #     key: "incloud.io/components"
                  #     values: ["infra"]
                nodeScrapeSelector: {}
                # matchLabels:
                #   incloud-metrics: "infra"
                nodeScrapeNamespaceSelector: {}
                  # matchExpressions:
                  #   - operator: In
                  #     key: "incloud.io/components"
                  #     values: ["infra"]
                staticScrapeSelector: {}
                # matchLabels:
                #   incloud-metrics: "infra"
                staticScrapeNamespaceSelector: {}
                  # matchExpressions:
                  #   - operator: In
                  #     key: "incloud.io/components"
                  #     values: ["infra"]
                podMetadata: {}
                  # labels:
                  #   app: vmagent
                  #   incloud-metrics: "infra"
                scrapeInterval: 30s
                minScrapeInterval: 15s
                maxScrapeInterval: 60s
                remoteWrite:
                  - url: http://prometheus-server.beget-prometheus.svc:80/api/v1/write
                externalLabels:
                  cluster_full_name: "cluster" #namespace-cluster_name
                  remotewrite_cluster: cluster #namespace-cluster_name
                affinity:
                  podAntiAffinity:
                    preferredDuringSchedulingIgnoredDuringExecution:
                      - podAffinityTerm:
                          labelSelector:
                            matchExpressions:
                              - key: app.kubernetes.io/name
                                operator: In
                                values:
                                  - vmagent
                              - key: app.kubernetes.io/instance
                                operator: In
                                values:
                                  - vmagent
                          topologyKey: failure-domain.beta.kubernetes.io/region
                        weight: 100
                probeNamespaceSelector: {}
                  # matchExpressions:
                  #   - operator: In
                  #     key: "incloud.io/components"
                  #     values: ["infra"]
                priorityClassName: system-cluster-critical
                tolerations: {}
            coreDns:
              enabled: false
            kubeDns:
              enabled: false
            kube-state-metrics:
              enabled: false
            kubeApiServer:
              enabled: true
              vmScrape:
                spec:
                  endpoints:
                    - port: https
                      scheme: https
                      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
                      tlsConfig:
                        caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                        serverName: kubernetes
                  namespaceSelector:
                    matchNames:
                      - default
                  selector:
                    matchLabels:
                      component: apiserver
                      provider: kubernetes
                  jobLabel: component
            kubeControllerManager:
              enabled: true
              vmScrape:
                spec:
                  endpoints:
                    - port: "http-metrics"
                      scheme: "https"
                      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
                      tlsConfig:
                        caFile: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                        serverName: "localhost"
            kubeEtcd:
              enabled: true
              service:
                port: 2381
                targetPort: 2381
              vmScrape:
                spec:
                  endpoints:
                    - scheme: "http"
                      port: http-metrics
                      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
                      tlsConfig:
                        caFile: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                        serverName: "localhost"
                        insecureSkipVerify: true
            kubeProxy:
              enabled: false
            kubeScheduler:
              enabled: true
              vmScrape:
                spec:
                  endpoints:
                    - port: "http-metrics"
                      scheme: "https"
                      bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
                      tlsConfig:
                        caFile: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
                  jobLabel: "jobLabel"
            kubelet:
              enabled: true
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            alertmanager:
              enabled: false
            defaultDashboards:
              enabled: false
            defaultRules:
              create: false
            grafana:
              enabled: false
            prometheus-node-exporter:
              enabled: false
            serviceAccount:
              create: false
            victoria-metrics-operator:
              enabled: false
            vmagent:
              enabled: true
            vmalert:
              enabled: false
            vmcluster:
              enabled: false
            vmsingle:
              enabled: false
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: victoriaMetricsAgentApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: victoria-metrics-k8s-stack
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://victoriametrics.github.io/helm-charts/
                      targetRevision: 0.52.0
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: victoriaMetricsAgentApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alert-rules/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsvictoriametricsalertrulesclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsVictoriaMetricsAlertRules
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsvictoriametricsalertrules-environment

    - step: set-environment-addons-victoriametricsalertrules
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-victoriametricsalertrules-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "victoria-metrics-alert-rules" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "victoriaMetricsAlertRulesApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "victoriaMetricsAlertRulesApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "victoriaMetricsAlertRulesApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            
            defaultRules:
              create: true
              labels:
                cluster_full_name: "in-cloud-cluster-name"
                remotewrite_cluster: "in-cloud-cluster-name"
                in-cloud-metrics: "infra"
            
              rules:
                AlertmanagerMembersInconsistent:
                  create: false
                InfoInhibitor:
                  create: false
                TooHighGoroutineSchedulingLatency:
                  create: false
            # Change severity critical to warning for alerts for test
                etcdMembersDown:
                  spec:
                    labels:
                      severity: warning
                etcdHighNumberOfFailedGRPCRequests:
                  spec:
                    labels:
                      severity: warning
                KubeContainerWaiting:
                  spec:
                    labels:
                      severity: critical
                KubePodNotReady:
                  spec:
                    labels:
                      severity: critical
                KubeCPUQuotaOvercommit:
                  spec:
                    labels:
                      severity: critical
                CPUThrottlingHigh:
                  spec:
                    expr: |-
                      sum(increase(container_cpu_cfs_throttled_periods_total{container!="", job="kubelet", metrics_path="/metrics/cadvisor", namespace=~"beget.*|kube.*"}[5m])) without (id, metrics_path, name, image, endpoint, job, node)
                        /
                      sum(increase(container_cpu_cfs_periods_total{job="kubelet", metrics_path="/metrics/cadvisor", namespace=~"beget.*|kube.*"}[5m])) without (id, metrics_path, name, image, endpoint, job, node)
                        > ( 25 / 100 )
                    labels:
                      severity: critical
            
              groups:
                etcd:
                  create: false
                general:
                  create: false
                k8sContainerMemoryRss:
                  create: false
                k8sContainerMemoryCache:
                  create: false
                k8sContainerCpuUsageSecondsTotal:
                  create: false
                k8sPodOwner:
                  create: false
                k8sContainerResource:
                  create: false
                k8sContainerMemoryWorkingSetBytes:
                  create: false
                k8sContainerMemorySwap:
                  create: false
                kubePrometheusNodeRecording:
                  create: false
                kubernetesApps:
                  create: true
                  targetNamespace: "beget.*|kube.*|default"
                kubernetesResources:
                  create: true
                kubernetesStorage:
                  create: true
                  targetNamespace: ".*"
                kubernetesSystem:
                  create: true
                kubernetesSystemKubelet:
                  create: true
                kubernetesSystemApiserver:
                  create: true
                kubernetesSystemControllerManager:
                  create: true
                kubeScheduler:
                  create: yes
                kubernetesSystemScheduler:
                  create: true
                kubeStateMetrics:
                  create: true
                nodeNetwork:
                  create: true
                node:
                  create: true
                vmagent:
                  create: true
                vmsingle:
                  create: false
                vmcluster:
                  create: true
                vmHealth:
                  create: true
                vmoperator:
                  create: false
                alertmanager:
                  create: true
            
            additionalVictoriaMetricsMap:
            # Custom alerts
              # blackbox-monitoring-infra:
              #   additionalLabels:
              #     in-cloud-metrics: "infra"
              #   groups:
              coredns:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: coredns
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: CoreDNSDown
                    annotations:
                      description: CoreDNS has disappeared from Prometheus target discovery.
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednsdown
                      summary: CoreDNS has disappeared from Prometheus target discovery.
                    expr: |
                      absent(up{job="coredns-coredns-metrics"} == 1)
                    for: 1m
                    labels:
                      severity: warning
                  - alert: CoreDNSLatencyHigh
                    annotations:
                      description: "CoreDNS has 99th percentile latency of {{"{{"}} $value {{"}}"}} seconds for server {{"{{"}} $labels.server {{"}}"}} zone {{"{{"}} $labels.zone {{"}}"}} ."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednslatencyhigh
                      summary: CoreDNS is experiencing high 99th percentile latency.
                    expr: |
                      histogram_quantile(0.99, sum(rate(coredns_dns_request_duration_seconds_bucket{job="coredns-coredns-metrics"}[5m])) without (instance,pod)) > 4
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CoreDNSErrorsHigh
                    annotations:
                      description: "CoreDNS is returning SERVFAIL for {{"{{"}} $value | humanizePercentage {{"}}"}} of requests."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednserrorshigh
                      summary: CoreDNS is returning SERVFAIL.
                    expr: |
                      sum without (pod, instance, server, zone, view, rcode, plugin) (rate(coredns_dns_responses_total{job="coredns-coredns-metrics",rcode="SERVFAIL"}[5m]))
                        /
                      sum without (pod, instance, server, zone, view, rcode, plugin) (rate(coredns_dns_responses_total{job="coredns-coredns-metrics"}[5m])) > 0.03
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CoreDNSErrorsHigh
                    annotations:
                      description: "CoreDNS is returning SERVFAIL for {{"{{"}} $value | humanizePercentage {{"}}"}} of requests."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednserrorshigh
                      summary: CoreDNS is returning SERVFAIL.
                    expr: |
                      sum without (pod, instance, server, zone, view, rcode, plugin) (rate(coredns_dns_responses_total{job="coredns-coredns-metrics",rcode="SERVFAIL"}[5m]))
                        /
                      sum without (pod, instance, server, zone, view, rcode, plugin) (rate(coredns_dns_responses_total{job="coredns-coredns-metrics"}[5m])) > 0.01
                    for: 10m
                    labels:
                      severity: warning
                - name: coredns_forward
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: CoreDNSForwardLatencyHigh
                    annotations:
                      description: "CoreDNS has 99th percentile latency of {{"{{"}} $value {{"}}"}} seconds forwarding requests to {{"{{"}} $labels.to {{"}}"}}."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednsforwardlatencyhigh
                      summary: CoreDNS is experiencing high latency forwarding requests.
                    expr: |
                      histogram_quantile(0.99, sum(rate(coredns_forward_request_duration_seconds_bucket{job="coredns-coredns-metrics"}[5m])) without (pod, instance, rcode)) > 4
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CoreDNSForwardErrorsHigh
                    annotations:
                      description: "CoreDNS is returning SERVFAIL for {{"{{"}} $value | humanizePercentage {{"}}"}} of forward requests to {{"{{"}} $labels.to {{"}}"}}."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednsforwarderrorshigh
                      summary: CoreDNS is returning SERVFAIL for forward requests.
                    expr: |
                      sum without (pod, instance, rcode) (rate(coredns_forward_responses_total{job="coredns-coredns-metrics",rcode="SERVFAIL"}[5m]))
                        /
                      sum without (pod, instance, rcode) (rate(coredns_forward_responses_total{job="coredns-coredns-metrics"}[5m])) > 0.03
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CoreDNSForwardErrorsHigh
                    annotations:
                      description: "CoreDNS is returning SERVFAIL for {{"{{"}} $value | humanizePercentage {{"}}"}} of forward requests to {{"{{"}} $labels.to {{"}}"}}."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednsforwarderrorshigh
                      summary: CoreDNS is returning SERVFAIL for forward requests.
                    expr: |
                      sum without (pod, instance, rcode) (rate(coredns_forward_responses_total{job="coredns-coredns-metrics",rcode="SERVFAIL"}[5m]))
                        /
                      sum without (pod, instance, rcode) (rate(coredns_forward_responses_total{job="coredns-coredns-metrics"}[5m])) > 0.01
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CoreDNSForwardHealthcheckFailureCount
                    annotations:
                      description: "CoreDNS health checks have failed to upstream server {{"{{"}} $labels.to {{"}}"}}."
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednsforwardhealthcheckfailurecount
                      summary: CoreDNS health checks have failed to upstream server.
                    expr: |
                      sum without (pod, instance) (rate(coredns_forward_healthcheck_failures_total{job="coredns-coredns-metrics"}[5m])) > 0
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CoreDNSForwardHealthcheckBrokenCount
                    annotations:
                      description: CoreDNS health checks have failed for all upstream servers.
                      runbook_url: https://github.com/povilasv/coredns-mixin/tree/master/runbook.md#alert-name-corednsforwardhealthcheckbrokencount
                      summary: CoreDNS health checks have failed for all upstream servers.
                    expr: |
                      sum without (pod, instance) (rate(coredns_forward_healthcheck_broken_total{job="coredns-coredns-metrics"}[5m])) > 0
                    for: 10m
                    labels:
                      severity: warning
              cert-manager:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: cert-manager
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: CertManagerAbsent
                    annotations:
                      description: New certificates will not be able to be minted, and existing ones
                        can't be renewed until cert-manager is back.
                      runbook_url: https://github.com/imusmanmalik/cert-manager-mixin/blob/main/RUNBOOK.md#certmanagerabsent
                      summary: Cert Manager has disappeared from Prometheus service discovery.
                    expr: absent(up{job="cert-manager"})
                    for: 1m
                    labels:
                      severity: warning
                - name: certificates
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: CertManagerCertExpirySoon
                    annotations:
                      dashboard_url: https://grafana.example.com/d/TvuRo2iMk/cert-manager
                      description: |
                        The domain that this cert covers will be unavailable after {{"{{"}} $value | humanizeDuration {{"}}"}}.
                        Clients using endpoints that this cert protects will start to fail in {{"{{"}} $value | humanizeDuration {{"}}"}}.
                      runbook_url: https://github.com/imusmanmalik/cert-manager-mixin/blob/main/RUNBOOK.md#certmanagercertexpirysoon
                      summary: |
                        The cert {{"{{"}} $labels.name {{"}}"}} is {{"{{"}} $value | humanizeDuration {{"}}"}} from
                        expiry, it should have renewed over a week ago.
                    expr: |
                      avg by (exported_namespace, namespace, name) (
                        certmanager_certificate_expiration_timestamp_seconds - time()
                      ) < (21 * 24 * 3600) # 21 days in seconds
                    for: 1h
                    labels:
                      severity: warning
                  - alert: CertManagerCertNotReady
                    annotations:
                      dashboard_url: https://grafana.example.com/d/TvuRo2iMk/cert-manager
                      description: This certificate has not been ready to serve traffic for at least
                        10m. If the cert is being renewed or there is another valid cert, the ingress
                        controller _may_ be able to serve that instead.
                      runbook_url: https://github.com/imusmanmalik/cert-manager-mixin/blob/main/RUNBOOK.md#certmanagercertnotready
                      summary: "The cert {{"{{"}} $labels.name {{"}}"}} is not ready to serve traffic."
                    expr: |
                      max by (name, exported_namespace, namespace, condition) (
                        certmanager_certificate_ready_status{condition!="True"} == 1
                      )
                    for: 10m
                    labels:
                      severity: warning
                  - alert: CertManagerHittingRateLimits
                    annotations:
                      dashboard_url: https://grafana.example.com/d/TvuRo2iMk/cert-manager
                      description: Depending on the rate limit, cert-manager may be unable to generate
                        certificates for up to a week.
                      runbook_url: https://github.com/imusmanmalik/cert-manager-mixin/blob/main/RUNBOOK.md#certmanagerhittingratelimits
                      summary: Cert manager hitting LetsEncrypt rate limits.
                    expr: |
                      sum by (host) (
                        rate(certmanager_http_acme_client_request_count{status="429"}[5m])
                      ) > 0
                    for: 5m
                    labels:
                      severity: warning
            
              etcd:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: etcd
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: EtcdHighFsyncDurationsIncreasing
                    expr: (rate(etcd_disk_wal_fsync_duration_seconds_count{job="kube-etcd"}[10m] offset 10m) / rate(etcd_disk_wal_fsync_duration_seconds_count{job="kube-etcd"}[10m] offset 10m)) > 1.15
                    for: 2m
                    labels:
                      severity: warning
                    annotations:
                      summary: "Etcd high deviv fsync durations (instance {{"{{"}} $labels.instance {{"}}"}})"
                      description: "Etcd WAL fsync duration increasing is over 15%\n  VALUE = {{"{{"}} $value {{"}}"}}\n  LABELS = {{"{{"}} $labels {{"}}"}}"
                  - alert: EtcdHighFsyncDurations
                    expr: histogram_quantile(0.99, rate(etcd_disk_wal_fsync_duration_seconds_bucket[1m])) > 0.5
                    for: 2m
                    labels:
                      severity: warning
                    annotations:
                      summary: "Etcd high fsync durations (instance {{"{{"}} $labels.instance {{"}}"}})"
                      description: "Etcd WAL fsync duration increasing, 99th percentile is over 0.5s\n  VALUE = {{"{{"}} $value {{"}}"}}\n  LABELS = {{"{{"}} $labels {{"}}"}}"
                  - alert: EtcdHighCommitDurations
                    expr: histogram_quantile(0.99, rate(etcd_disk_backend_commit_duration_seconds_bucket[1m])) > 0.25
                    for: 2m
                    labels:
                      severity: warning
                    annotations:
                      summary: "Etcd high commit durations (instance {{"{{"}} $labels.instance {{"}}"}})"
                      description: "Etcd commit duration increasing, 99th percentile is over 0.25s\n  VALUE = {{"{{"}} $value {{"}}"}}\n  LABELS = {{"{{"}} $labels {{"}}"}}"
                  - alert: EtcdNoLeader
                    expr: etcd_server_has_leader == 0
                    for: 0m
                    labels:
                      severity: warning
                    annotations:
                      summary: "Etcd no Leader (instance {{"{{"}} $labels.instance {{"}}"}})"
                      description: "Etcd cluster have no leader\n  VALUE = {{"{{"}} $value {{"}}"}}\n  LABELS = {{"{{"}} $labels {{"}}"}}"
                  - alert: EtcdHighNumberOfLeaderChanges
                    expr: increase(etcd_server_leader_changes_seen_total[5m]) > 1
                    for: 0m
                    labels:
                      severity: warning
                    annotations:
                      summary: "Etcd high number of leader changes (instance {{"{{"}} $labels.instance {{"}}"}})"
                      description: "Etcd leader changed more than 1 times during 5 minutes\n  VALUE = {{"{{"}} $value {{"}}"}}\n  LABELS = {{"{{"}} $labels {{"}}"}}"
                  - alert: etcdMembersDown
                    annotations:
                      description: "etcd cluster {{"{{"}} $labels.job {{"}}"}} - members are down ({{"{{"}} $value {{"}}"}})."
                      summary: etcd cluster members are down.
                    expr: |
                      max without (endpoint) (
                        sum without (instance) (up{job=~".*etcd.*"} == bool 0)
                      or
                        count without (To) (
                          sum without (instance) (rate(etcd_network_peer_sent_failures_total{job=~".*etcd.*"}[120s])) > 0.01
                        )
                      )
                      > 0
                    for: 10m
                    labels:
                      severity: warning
                  - alert: etcdDatabaseQuotaLowSpace
                    annotations:
                      description: |
                        etcd cluster {{"{{"}} $labels.job {{"}}"}} - database size exceeds the defined
                        quota on etcd instance {{"{{"}} $labels.instance {{"}}"}}, please defrag or increase the
                        quota as the writes to etcd will be disabled when it is full.
                      summary: etcd cluster database is running full.
                    expr: |
                      (last_over_time(etcd_mvcc_db_total_size_in_bytes[5m]) / last_over_time(etcd_server_quota_backend_bytes[5m]))*100 > 95
                    for: 10m
                    labels:
                      severity: warning
                  - alert: etcdExcessiveDatabaseGrowth
                    annotations:
                      description: |
                        etcd cluster {{"{{"}} $labels.job {{"}}"}} - Predicting running out of disk
                        space in the next four hours, based on write observations within the past
                        four hours on etcd instance {{"{{"}} $labels.instance {{"}}"}}, please check as it might
                        be disruptive.
                      summary: etcd cluster database growing very fast.
                    expr: |
                      predict_linear(etcd_mvcc_db_total_size_in_bytes[4h], 4*60*60) > etcd_server_quota_backend_bytes
                    for: 10m
                    labels:
                      severity: warning
                  - alert: etcdDatabaseHighFragmentationRatio
                    annotations:
                      description: |
                        etcd cluster {{"{{"}} $labels.job {{"}}"}} - database size in use on instance
                        {{"{{"}} $labels.instance {{"}}"}} is {{"{{"}} $value | humanizePercentage {{"}}"}} of the actual
                        allocated disk space, please run defragmentation (e.g. etcdctl defrag) to
                        retrieve the unused fragmented disk space.
                      runbook_url: https://etcd.io/docs/v3.5/op-guide/maintenance/#defragmentation
                      summary: etcd database size in use is less than 50% of the actual allocated
                        storage.
                    expr: |
                      (last_over_time(etcd_mvcc_db_total_size_in_use_in_bytes[5m]) / last_over_time(etcd_mvcc_db_total_size_in_bytes[5m])) < 0.5 and etcd_mvcc_db_total_size_in_use_in_bytes > 104857600
                    for: 10m
                    labels:
                      severity: warning
              api-usage:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: pre-release-lifecycle
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: APIRemovedInNextReleaseInUse
                    annotations:
                      description: |
                        Deprecated API that will be removed in the next version is being
                        used. Removing the workload that is using the {{"{{"}} $labels.group {{"}}"}}.{{"{{"}} $labels.version
                        {{"}}"}}/{{"{{"}} $labels.resource {{"}}"}} API might be necessary for a successful upgrade
                        to the next cluster version. Refer to 'oc get apirequestcounts {{"{{"}} $labels.resource
                        {{"}}"}}.{{"{{"}} $labels.version {{"}}"}}.{{"{{"}} $labels.group {{"}}"}} -o yaml' to identify the workload.
                      summary: Deprecated API that will be removed in the next version is being used.
                    expr: |
                      group(apiserver_requested_deprecated_apis{removed_release="1.25"}) by (group,version,resource) and (sum by(group,version,resource) (rate(apiserver_request_total{system_client!="kube-controller-manager",system_client!="cluster-policy-controller"}[4h]))) > 0
                    for: 1h
                    labels:
                      severity: info
                  - alert: APIRemovedInNextEUSReleaseInUse
                    annotations:
                      description: |
                        Deprecated API that will be removed in the next EUS version is
                        being used. Removing the workload that is using the {{"{{"}} $labels.group {{"}}"}}.{{"{{"}}
                        $labels.version {{"}}"}}/{{"{{"}} $labels.resource {{"}}"}} API might be necessary for a successful
                        upgrade to the next EUS cluster version. Refer to 'oc get apirequestcounts
                        {{"{{"}} $labels.resource {{"}}"}}.{{"{{"}} $labels.version {{"}}"}}.{{"{{"}} $labels.group {{"}}"}} -o yaml'
                        to identify the workload.
                      summary: Deprecated API that will be removed in the next EUS version is being used.
                    expr: |
                      group(apiserver_requested_deprecated_apis{removed_release=~"1\\.2[5]"}) by (group,version,resource) and (sum by(group,version,resource) (rate(apiserver_request_total{system_client!="kube-controller-manager",system_client!="cluster-policy-controller"}[4h]))) > 0
                    for: 1h
                    labels:
                      severity: info
              audit-errors:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: apiserver-audit
                  rules:
                  - alert: AuditLogError
                    annotations:
                      description: An API Server had an error writing to an audit log.
                      summary: |-
                        An API Server instance was unable to write audit logs. This could be
                        triggered by the node running out of space, or a malicious actor
                        tampering with the audit logs.
                    expr: |
                      sum by (job, instance)(rate(apiserver_audit_error_total{job=~"apiserver|vmagent-kube-apiserver-client"}[5m])) / sum by (job, instance) (rate(apiserver_audit_event_total{job=~"apiserver|vmagent-kube-apiserver-client"}[5m])) > 0
                    for: 1m
                    labels:
                      severity: warning
              cluster-monitoring-victoriametrics:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: jobs
                  rules:
                  - alert: VMAgentJobAbsent
                    expr: absent(up{job="vmagent-vmagent"})
                    for: 2m
                    annotations:
                      description: VMAgent is absesnt in {{"{{"}} $labels.cluster}}.
                      summary: VMAgent is absesnt in {{"{{"}} $labels.cluster}}.
                    labels:
                      severity: critical
                  - alert: VMAlertJobAbsent
                    expr: absent(up{job="vmalert-vmalert"})
                    for: 2m
                    annotations:
                      description: VMAlert is absesnt in {{"{{"}} $labels.cluster}}.
                      summary: VMAlert is absesnt in {{"{{"}} $labels.cluster}}.
                    labels:
                      severity: critical
                  - alert: VMAlertmanagerJobAbsent
                    expr: absent(up{job="vmalertmanager-alertmanager"})
                    for: 2m
                    annotations:
                      description: VMAlertmanager is absesnt in {{"{{"}} $labels.cluster}}.
                      summary: VMAlertmanager is absesnt in {{"{{"}} $labels.cluster}}.
                    labels:
                      severity: critical
            
              cluster-monitoring-victoriametrics-operator:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: pods
                  rules:
                  - alert: ControlPlanePodsRestart
                    expr: rate(kube_pod_container_status_restarts_total{namespace=~"kube-system"}[10m]) * 600>=1
                    for: 1m
                    labels:
                      severity: warning
                    annotations:
                      description: A control-plane pod restarted
                      summary: |-
                        An control plane pod restarted.
                        This may be caused by updates in the cluster, or it may be a lack of resources.
                  - alert: PodsRestart
                    expr: rate(kube_pod_container_status_restarts_total{namespace=~"beget.*|kube.*"}[10m]) * 600>=1
                    for: 1m
                    labels:
                      severity: warning
                    annotations:
                      description: Pod restarted
                      summary: |-
                        Pod restarted.
                        This may be caused by updates in the cluster, or it may be a lack of resources or incorrect configuration.
              cluster-monitoring-prometheus-operator:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: kubernetes.rules
                  rules:
                  - expr: sum(rate(container_cpu_usage_seconds_total{container="",pod!=""}[5m]))
                      BY (pod, namespace)
                    record: pod:container_cpu_usage:sum
                  - expr: sum(container_fs_usage_bytes{pod!=""}) BY (pod, namespace)
                    record: pod:container_fs_usage_bytes:sum
                  - expr: sum(container_memory_usage_bytes{container!=""}) BY (namespace)
                    record: namespace:container_memory_usage_bytes:sum
                  - expr: sum(rate(container_cpu_usage_seconds_total{container!="POD",container!=""}[5m]))
                      BY (namespace)
                    record: namespace:container_cpu_usage:sum
                  - expr: sum(container_memory_usage_bytes{container="",pod!=""}) BY (cluster) /
                      sum(machine_memory_bytes) BY (cluster)
                    record: cluster:memory_usage:ratio
                  - expr: sum(container_spec_cpu_shares{container="",pod!=""}) / 1000 / sum(machine_cpu_cores)
                    record: cluster:container_spec_cpu_shares:ratio
                  - expr: sum(rate(container_cpu_usage_seconds_total{container="",pod!=""}[5m]))
                      / sum(machine_cpu_cores)
                    record: cluster:container_cpu_usage:ratio
                  - expr: max without(endpoint, instance, job, pod, service) (kube_node_labels and
                      on(node) kube_node_role{role="control-plane"})
                    labels:
                      label_node_role_kubernetes_io: master
                      label_node_role_kubernetes_io_master: "true"
                    record: cluster:master_nodes
                  - expr: max without(endpoint, instance, job, pod, service) (kube_node_labels and
                      on(node) kube_node_role{role="infra"})
                    labels:
                      label_node_role_kubernetes_io_infra: "true"
                    record: cluster:infra_nodes
                  - expr: max without(endpoint, instance, job, pod, service) (cluster:master_nodes
                      and on(node) cluster:infra_nodes)
                    labels:
                      label_node_role_kubernetes_io_infra: "true"
                      label_node_role_kubernetes_io_master: "true"
                    record: cluster:master_infra_nodes
                  - expr: cluster:master_infra_nodes or on (node) cluster:master_nodes or on (node)
                      cluster:infra_nodes or on (node) max without(endpoint, instance, job, pod,
                      service) (kube_node_labels)
                    record: cluster:nodes_roles
                  - expr: kube_node_labels and on(node) (sum(label_replace(node_cpu_info, "node",
                      "$1", "instance", "(.*)")) by (node, package, core) == 2)
                    labels:
                      label_node_hyperthread_enabled: "true"
                    record: cluster:hyperthread_enabled_nodes
                  - expr: count(sum(virt_platform) by (instance, type, system_manufacturer, system_product_name,
                      baseboard_manufacturer, baseboard_product_name)) by (type, system_manufacturer,
                      system_product_name, baseboard_manufacturer, baseboard_product_name)
                    record: cluster:virt_platform_nodes:sum
                  - expr: |
                      sum by(label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io, label_kubernetes_io_arch, label_node_openshift_io_os_id) (
                        (
                          cluster:master_nodes
                          * on(node) group_left() max by(node)
                          (
                            kube_node_status_capacity{resource="cpu",unit="core"}
                          )
                        )
                        or on(node) (
                          max without(endpoint, instance, job, pod, service)
                          (
                            kube_node_labels
                          ) * on(node) group_left() max by(node)
                          (
                            kube_node_status_capacity{resource="cpu",unit="core"}
                          )
                        )
                      )
                    record: cluster:capacity_cpu_cores:sum
                  - expr: |
                      clamp_max(
                        label_replace(
                          sum by(instance, package, core) (
                            node_cpu_info{core!="",package!=""}
                            or
                            # Assume core = cpu and package = 0 for platforms that don't expose core/package labels.
                            label_replace(label_join(node_cpu_info{core="",package=""}, "core", "", "cpu"), "package", "0", "package", "")
                          ) > 1,
                          "label_node_hyperthread_enabled",
                          "true",
                          "instance",
                          "(.*)"
                        ) or on (instance, package)
                        label_replace(
                          sum by(instance, package, core) (
                            label_replace(node_cpu_info{core!="",package!=""}
                            or
                            # Assume core = cpu and package = 0 for platforms that don't expose core/package labels.
                            label_join(node_cpu_info{core="",package=""}, "core", "", "cpu"), "package", "0", "package", "")
                          ) <= 1,
                          "label_node_hyperthread_enabled",
                          "false",
                          "instance",
                          "(.*)"
                        ),
                        1
                      )
                    record: cluster:cpu_core_hyperthreading
                  - expr: |
                      topk by(node) (1, cluster:nodes_roles) * on (node)
                        group_right( label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io, label_node_openshift_io_os_id, label_kubernetes_io_arch,
                                    label_node_role_kubernetes_io_master, label_node_role_kubernetes_io_infra)
                      label_replace( cluster:cpu_core_hyperthreading, "node", "$1", "instance", "(.*)" )
                    record: cluster:cpu_core_node_labels
                  - expr: count(cluster:cpu_core_node_labels) by (label_beta_kubernetes_io_instance_type,
                      label_node_hyperthread_enabled)
                    record: cluster:capacity_cpu_cores_hyperthread_enabled:sum
                  - expr: |
                      sum by(label_beta_kubernetes_io_instance_type, label_node_role_kubernetes_io)
                      (
                        (
                          cluster:master_nodes
                          * on(node) group_left() max by(node)
                          (
                            kube_node_status_capacity{resource="memory",unit="byte"}
                          )
                        )
                        or on(node)
                        (
                          max without(endpoint, instance, job, pod, service)
                          (
                            kube_node_labels
                          )
                          * on(node) group_left() max by(node)
                          (
                            kube_node_status_capacity{resource="memory",unit="byte"}
                          )
                        )
                      )
                    record: cluster:capacity_memory_bytes:sum
                  - expr: sum(1 - rate(node_cpu_seconds_total{mode="idle"}[2m]) * on(namespace,
                      pod) group_left(node) node_namespace_pod:kube_pod_info:{pod=~"node-exporter.+"})
                    record: cluster:cpu_usage_cores:sum
                  - expr: sum(node_memory_MemTotal_bytes{job="node-exporter"} - node_memory_MemAvailable_bytes{job="node-exporter"})
                    record: cluster:memory_usage_bytes:sum
                  - expr: sum(rate(container_cpu_usage_seconds_total{namespace!~"openshift-.+",pod!="",container=""}[5m]))
                    record: workload:cpu_usage_cores:sum
                  - expr: cluster:cpu_usage_cores:sum - workload:cpu_usage_cores:sum
                    record: openshift:cpu_usage_cores:sum
                  - expr: sum(container_memory_working_set_bytes{namespace!~"openshift-.+",pod!="",container=""})
                    record: workload:memory_usage_bytes:sum
                  - expr: cluster:memory_usage_bytes:sum - workload:memory_usage_bytes:sum
                    record: openshift:memory_usage_bytes:sum
                  - expr: sum(cluster:master_nodes or on(node) kube_node_labels ) BY (label_beta_kubernetes_io_instance_type,
                      label_node_role_kubernetes_io, label_kubernetes_io_arch, label_node_openshift_io_os_id)
                    record: cluster:node_instance_type_count:sum
                  - expr: |
                      sum by(provisioner) (
                        topk by (namespace, persistentvolumeclaim) (
                          1, kube_persistentvolumeclaim_resource_requests_storage_bytes
                        ) * on(namespace, persistentvolumeclaim) group_right()
                        topk by(namespace, persistentvolumeclaim) (
                          1, kube_persistentvolumeclaim_info * on(storageclass) group_left(provisioner) topk by(storageclass) (1, max by(storageclass, provisioner) (kube_storageclass_info))
                        )
                      )
                    record: cluster:kube_persistentvolumeclaim_resource_requests_storage_bytes:provisioner:sum
                  - expr: (sum(node_role_os_version_machine:cpu_capacity_cores:sum{label_node_role_kubernetes_io_master="",label_node_role_kubernetes_io_infra=""}
                      or absent(__does_not_exist__)*0)) + ((sum(node_role_os_version_machine:cpu_capacity_cores:sum{label_node_role_kubernetes_io_master="true"}
                      or absent(__does_not_exist__)*0) * ((max(cluster_master_schedulable == 1)*0+1)
                      or (absent(cluster_master_schedulable == 1)*0))))
                    record: workload:capacity_physical_cpu_cores:sum
                  - expr: min_over_time(workload:capacity_physical_cpu_cores:sum[5m:15s])
                    record: cluster:usage:workload:capacity_physical_cpu_cores:min:5m
                  - expr: max_over_time(workload:capacity_physical_cpu_cores:sum[5m:15s])
                    record: cluster:usage:workload:capacity_physical_cpu_cores:max:5m
                  - expr: |
                      sum  by (provisioner) (
                        topk by (namespace, persistentvolumeclaim) (
                          1, kubelet_volume_stats_used_bytes
                        ) * on (namespace,persistentvolumeclaim) group_right()
                        topk by (namespace, persistentvolumeclaim) (
                          1, kube_persistentvolumeclaim_info * on(storageclass) group_left(provisioner) topk by(storageclass) (1, max by(storageclass, provisioner) (kube_storageclass_info))
                        )
                      )
                    record: cluster:kubelet_volume_stats_used_bytes:provisioner:sum
                  - expr: sum by (instance) (apiserver_storage_objects)
                    record: instance:etcd_object_counts:sum
                  - expr: topk(500, max by(resource) (apiserver_storage_objects))
                    record: cluster:usage:resources:sum
                  - expr: count(count (kube_pod_restart_policy{type!="Always",namespace!~"openshift-.+"})
                      by (namespace,pod))
                    record: cluster:usage:pods:terminal:workload:sum
                  - expr: sum(max(kubelet_containers_per_pod_count_sum) by (instance))
                    record: cluster:usage:containers:sum
                  - expr: count(cluster:cpu_core_node_labels) by (label_kubernetes_io_arch, label_node_hyperthread_enabled,
                      label_node_openshift_io_os_id,label_node_role_kubernetes_io_master,label_node_role_kubernetes_io_infra)
                    record: node_role_os_version_machine:cpu_capacity_cores:sum
                  - expr: count(max(cluster:cpu_core_node_labels) by (node, package, label_beta_kubernetes_io_instance_type,
                      label_node_hyperthread_enabled, label_node_role_kubernetes_io) ) by ( label_beta_kubernetes_io_instance_type,
                      label_node_hyperthread_enabled, label_node_role_kubernetes_io)
                    record: cluster:capacity_cpu_sockets_hyperthread_enabled:sum
                  - expr: count (max(cluster:cpu_core_node_labels) by (node, package, label_kubernetes_io_arch,
                      label_node_hyperthread_enabled, label_node_openshift_io_os_id,label_node_role_kubernetes_io_master,label_node_role_kubernetes_io_infra)
                      ) by (label_kubernetes_io_arch, label_node_hyperthread_enabled, label_node_openshift_io_os_id,label_node_role_kubernetes_io_master,label_node_role_kubernetes_io_infra)
                    record: node_role_os_version_machine:cpu_capacity_sockets:sum
                  - expr: max(alertmanager_integrations{namespace="in-cloud-monitoring"})
                    record: cluster:alertmanager_integrations:max
                  - expr: sum by(plugin_name, volume_mode)(pv_collector_total_pv_count)
                    record: cluster:kube_persistentvolume_plugin_type_counts:sum
                  - expr: sum by(version)(vsphere_vcenter_info)
                    record: cluster:vsphere_vcenter_info:sum
                  - expr: sum by(version)(vsphere_esxi_version_total)
                    record: cluster:vsphere_esxi_version_total:sum
                  - expr: sum by(hw_version)(vsphere_node_hw_version_total)
                    record: cluster:vsphere_node_hw_version_total:sum
                  - expr: |
                      sum(
                        min by (node) (kube_node_status_condition{condition="Ready",status="true"})
                          and
                        max by (node) (kube_node_role{role="control-plane"})
                      ) == bool sum(kube_node_role{role="control-plane"})
                    record: cluster:control_plane:all_nodes_ready
                  - alert: ClusterMonitoringOperatorReconciliationErrors
                    annotations:
                      description: Errors are occurring during reconciliation cycles. Inspect the
                        cluster-monitoring-operator log for potential root causes.
                      summary: Cluster Monitoring Operator is experiencing unexpected reconciliation
                        errors.
                    expr: max_over_time(cluster_monitoring_operator_last_reconciliation_successful[5m])
                      == 0
                    for: 1h
                    labels:
                      severity: warning
                  - alert: AlertmanagerReceiversNotConfigured
                    annotations:
                      description: Alerts are not configured to be sent to a notification system,
                        meaning that you may not be notified in a timely fashion when important
                        failures occur. Check the OpenShift documentation to learn how to configure
                        notifications with Alertmanager.
                      summary: Receivers (notification integrations) are not configured on Alertmanager
                    expr: cluster:alertmanager_integrations:max == 0
                    for: 10m
                    labels:
                      severity: warning
                  - alert: MultipleContainersOOMKilled
                    annotations:
                      description: Multiple containers were out of memory killed within the past
                        15 minutes. There are many potential causes of OOM errors, however issues
                        on a specific node or containers breaching their limits is common.
                      summary: Containers are being killed due to OOM
                    expr: sum(max by(namespace, container, pod) (increase(kube_pod_container_status_restarts_total[12m]))
                      and max by(namespace, container, pod) (kube_pod_container_status_last_terminated_reason{reason="OOMKilled"})
                      == 1) > 5
                    for: 15m
                    labels:
                      severity: info
                  - expr: avg_over_time((((count((max by (node) (up{job="kubelet",metrics_path="/metrics"}
                      == 1) and max by (node) (kube_node_status_condition{condition="Ready",status="true"}
                      == 1) and min by (node) (kube_node_spec_unschedulable == 0))) / scalar(count(min
                      by (node) (kube_node_spec_unschedulable == 0))))))[5m:1s])
                    record: cluster:usage:kube_schedulable_node_ready_reachable:avg5m
                  - expr: avg_over_time((count(max by (node) (kube_node_status_condition{condition="Ready",status="true"}
                      == 1)) / scalar(count(max by (node) (kube_node_status_condition{condition="Ready",status="true"}))))[5m:1s])
                    record: cluster:usage:kube_node_ready:avg5m
                  - expr: (max without (condition,container,endpoint,instance,job,service) (((kube_pod_status_ready{condition="false"}
                      == 1)*0 or (kube_pod_status_ready{condition="true"} == 1)) * on(pod,namespace)
                      group_left() group by (pod,namespace) (kube_pod_status_phase{phase=~"Running|Unknown|Pending"}
                      == 1)))
                    record: kube_running_pod_ready
                  - expr: avg(kube_running_pod_ready{namespace=~"openshift-.*"})
                    record: cluster:usage:openshift:kube_running_pod_ready:avg
                  - expr: avg(kube_running_pod_ready{namespace!~"openshift-.*"})
                    record: cluster:usage:workload:kube_running_pod_ready:avg
                - interval: 30s
                  name: kubernetes-recurring.rules
                  rules:
                  - expr: sum_over_time(workload:capacity_physical_cpu_cores:sum[30s:1s]) + ((cluster:usage:workload:capacity_physical_cpu_core_seconds
                      offset 25s) or (absent(cluster:usage:workload:capacity_physical_cpu_core_seconds
                      offset 25s)*0))
                    record: cluster:usage:workload:capacity_physical_cpu_core_seconds
                - name: openshift-ingress.rules
                  rules:
                  - expr: sum by (code) (rate(haproxy_server_http_responses_total[5m]) > 0)
                    record: code:cluster:ingress_http_request_count:rate5m:sum
                  - expr: sum (rate(haproxy_frontend_bytes_in_total[5m]))
                    record: cluster:usage:ingress_frontend_bytes_in:rate5m:sum
                  - expr: sum (rate(haproxy_frontend_bytes_out_total[5m]))
                    record: cluster:usage:ingress_frontend_bytes_out:rate5m:sum
                  - expr: sum (haproxy_frontend_current_sessions)
                    record: cluster:usage:ingress_frontend_connections:sum
                  - expr: sum(max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{code!~"2xx|1xx|4xx|3xx",exported_namespace!~"openshift-.*"}[5m])
                      > 0)) / sum (max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{exported_namespace!~"openshift-.*"}[5m])))
                      or absent(__does_not_exist__)*0
                    record: cluster:usage:workload:ingress_request_error:fraction5m
                  - expr: sum (max without(service,endpoint,container,pod,job,namespace) (irate(haproxy_server_http_responses_total{exported_namespace!~"openshift-.*"}[5m])))
                      or absent(__does_not_exist__)*0
                    record: cluster:usage:workload:ingress_request_total:irate5m
                  - expr: sum(max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{code!~"2xx|1xx|4xx|3xx",exported_namespace=~"openshift-.*"}[5m])
                      > 0)) / sum (max without(service,endpoint,container,pod,job,namespace) (increase(haproxy_server_http_responses_total{exported_namespace=~"openshift-.*"}[5m])))
                      or absent(__does_not_exist__)*0
                    record: cluster:usage:openshift:ingress_request_error:fraction5m
                  - expr: sum (max without(service,endpoint,container,pod,job,namespace) (irate(haproxy_server_http_responses_total{exported_namespace=~"openshift-.*"}[5m])))
                      or absent(__does_not_exist__)*0
                    record: cluster:usage:openshift:ingress_request_total:irate5m
                  - expr: sum(ingress_controller_aws_nlb_active) or vector(0)
                    record: cluster:ingress_controller_aws_nlb_active:sum
                - name: openshift-build.rules
                  rules:
                  - expr: sum by (strategy) (openshift_build_status_phase_total)
                    record: openshift:build_by_strategy:sum
                - name: in-cloud-monitoring.rules
                  rules:
                  - expr: sum by (job,namespace) (max without(instance) (prometheus_tsdb_head_series{namespace=~"in-cloud-monitoring|openshift-user-workload-monitoring"}))
                    record: openshift:prometheus_tsdb_head_series:sum
                  - expr: sum by(job,namespace) (max without(instance) (rate(prometheus_tsdb_head_samples_appended_total{namespace=~"in-cloud-monitoring|openshift-user-workload-monitoring"}[2m])))
                    record: openshift:prometheus_tsdb_head_samples_appended_total:sum
                  - expr: sum by (namespace) (max without(instance) (container_memory_working_set_bytes{namespace=~"in-cloud-monitoring|openshift-user-workload-monitoring",
                      container=""}))
                    record: monitoring:container_memory_working_set_bytes:sum
                  - expr: topk(3, sum by(namespace, job)(sum_over_time(scrape_series_added[1h])))
                    record: namespace_job:scrape_series_added:topk3_sum1h
                  - expr: topk(3, max by(namespace, job) (topk by(namespace,job) (1, scrape_samples_post_metric_relabeling)))
                    record: namespace_job:scrape_samples_post_metric_relabeling:topk3
                  - expr: sum by(exported_service) (rate(haproxy_server_http_responses_total{exported_namespace="in-cloud-monitoring",
                      exported_service=~"alertmanager-main|prometheus-k8s|prometheus"}[5m]))
                    record: monitoring:haproxy_server_http_responses_total:sum
                  - expr: max by (cluster, namespace, workload, pod) (label_replace(label_replace(kube_pod_owner{job="kube-state-metrics",
                      owner_kind="ReplicationController"},"replicationcontroller", "$1", "owner_name",
                      "(.*)") * on(replicationcontroller, namespace) group_left(owner_name) topk
                      by(replicationcontroller, namespace) (1, max by (replicationcontroller, namespace,
                      owner_name) (kube_replicationcontroller_owner{job="kube-state-metrics"})),"workload",
                      "$1", "owner_name", "(.*)"))
                    labels:
                      workload_type: deploymentconfig
                    record: namespace_workload_pod:kube_pod_owner:relabel
                - name: openshift-etcd-telemetry.rules
                  rules:
                  - expr: sum by (instance) (etcd_mvcc_db_total_size_in_bytes{job="etcd"})
                    record: instance:etcd_mvcc_db_total_size_in_bytes:sum
                  - expr: histogram_quantile(0.99, sum by (instance, le) (rate(etcd_disk_wal_fsync_duration_seconds_bucket{job="etcd"}[5m])))
                    labels:
                      quantile: "0.99"
                    record: instance:etcd_disk_wal_fsync_duration_seconds:histogram_quantile
                  - expr: histogram_quantile(0.99, sum by (instance, le) (rate(etcd_network_peer_round_trip_time_seconds_bucket{job="etcd"}[5m])))
                    labels:
                      quantile: "0.99"
                    record: instance:etcd_network_peer_round_trip_time_seconds:histogram_quantile
                  - expr: sum by (instance) (etcd_mvcc_db_total_size_in_use_in_bytes{job="etcd"})
                    record: instance:etcd_mvcc_db_total_size_in_use_in_bytes:sum
                  - expr: histogram_quantile(0.99, sum by (instance, le) (rate(etcd_disk_backend_commit_duration_seconds_bucket{job="etcd"}[5m])))
                    labels:
                      quantile: "0.99"
                    record: instance:etcd_disk_backend_commit_duration_seconds:histogram_quantile
                - name: openshift-sre.rules
                  rules:
                  - expr: sum(rate(apiserver_request_total{job="apiserver"}[10m])) BY (code)
                    record: code:apiserver_request_total:rate:sum
            
            
            
              cpu-utilization:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: control-plane-cpu-utilization
                  params:
                    extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
                  rules:
                  - alert: HighOverallControlPlaneCPU
                    annotations:
                      description: Given three control plane nodes, the overall CPU utilization
                        may only be about 2/3 of all available capacity. This is because if a single
                        control plane node fails, the remaining two must handle the load of the
                        cluster in order to be HA. If the cluster is using more than 2/3 of all
                        capacity, if one control plane node fails, the remaining two are likely
                        to fail when they take the load. To fix this, increase the CPU and memory
                        on your control plane nodes.
                      runbook_url: https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/ExtremelyHighIndividualControlPlaneCPU.md
                      summary: CPU utilization across all three control plane nodes is higher than
                        two control plane nodes can sustain; a single control plane node outage
                        may cause a cascading failure; increase available CPU.
                    expr: |
                      sum(
                        100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])) * 100)
                        AND on (instance) label_replace( kube_node_role{role="control-plane"}, "instance", "$1", "node", "(.+)" )
                      )
                      /
                      count(kube_node_role{role="control-plane"})
                      > 60
                    for: 10m
                    labels:
                      severity: warning
                  - alert: ExtremelyHighIndividualControlPlaneCPU
                    annotations:
                      description: Extreme CPU pressure can cause slow serialization and poor performance
                        from the kube-apiserver and etcd. When this happens, there is a risk of
                        clients seeing non-responsive API requests which are issued again causing
                        even more CPU pressure. It can also cause failing liveness probes due to
                        slow etcd responsiveness on the backend. If one kube-apiserver fails under
                        this condition, chances are you will experience a cascade as the remaining
                        kube-apiservers are also under-provisioned. To fix this, increase the CPU
                        and memory on your control plane nodes.
                      runbook_url: https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/ExtremelyHighIndividualControlPlaneCPU.md
                      summary: CPU utilization on a single control plane node is very high, more
                        CPU pressure is likely to cause a failover; increase available CPU.
                    expr: |
                      100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])) * 100) > 90 AND on (instance) label_replace( kube_node_role{role="control-plane"}, "instance", "$1", "node", "(.+)" )
                    for: 5m
                    labels:
                      severity: warning
                  - alert: ExtremelyHighIndividualControlPlaneCPU
                    annotations:
                      description: Extreme CPU pressure can cause slow serialization and poor performance
                        from the kube-apiserver and etcd. When this happens, there is a risk of
                        clients seeing non-responsive API requests which are issued again causing
                        even more CPU pressure. It can also cause failing liveness probes due to
                        slow etcd responsiveness on the backend. If one kube-apiserver fails under
                        this condition, chances are you will experience a cascade as the remaining
                        kube-apiservers are also under-provisioned. To fix this, increase the CPU
                        and memory on your control plane nodes.
                      runbook_url: https://github.com/openshift/runbooks/blob/master/alerts/cluster-kube-apiserver-operator/ExtremelyHighIndividualControlPlaneCPU.md
                      summary: Sustained high CPU utilization on a single control plane node, more
                        CPU pressure is likely to cause a failover; increase available CPU.
                    expr: |
                      100 - (avg by (instance) (rate(node_cpu_seconds_total{mode="idle"}[1m])) * 100) > 90 AND on (instance) label_replace( kube_node_role{role="control-plane"}, "instance", "$1", "node", "(.+)" )
                    for: 1h
                    labels:
                      severity: critical
              kube-apiserver-requests:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                  - name: apiserver-requests-in-flight
                    params:
                      extra_label: ["in-cloud_metrics=infra"]
                    rules:
                      - expr: |
                          max_over_time(sum(apiserver_current_inflight_requests) by (request_kind, cluster_full_name)[2m:])
                        record: cluster:apiserver_current_inflight_requests:sum:max_over_time:2m
              node-exporter-rules:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                  - name: node-exporter.rules
                    params:
                      extra_label: ["in-cloud_metrics=infra"]      # apply additional label filter "env=dev" for all requests
            
                    rules:
                      - expr: |
                          count without (cpu, mode) (
                            node_cpu_seconds_total{job="node-exporter",mode="idle"}
                          )
                        record: instance:node_num_cpu:sum
                      - expr: |
                          1 - avg without (cpu) (
                            sum without (mode) (rate(node_cpu_seconds_total{job="node-exporter", mode=~"idle|iowait|steal"}[1m]))
                          )
                        record: instance:node_cpu_utilisation:rate1m
                      - expr: |
                          (
                            node_load1{job="node-exporter"}
                          /
                            instance:node_num_cpu:sum{job="node-exporter"}
                          )
                        record: instance:node_load1_per_cpu:ratio
                      - expr: |
                          1 - (
                            (
                              node_memory_MemAvailable_bytes{job="node-exporter"}
                              or
                              (
                                node_memory_Buffers_bytes{job="node-exporter"}
                                +
                                node_memory_Cached_bytes{job="node-exporter"}
                                +
                                node_memory_MemFree_bytes{job="node-exporter"}
                                +
                                node_memory_Slab_bytes{job="node-exporter"}
                              )
                            )
                          /
                            node_memory_MemTotal_bytes{job="node-exporter"}
                          )
                        record: instance:node_memory_utilisation:ratio
                      - expr: |
                          rate(node_vmstat_pgmajfault{job="node-exporter"}[1m])
                        record: instance:node_vmstat_pgmajfault:rate1m
                      - expr: |
                          rate(node_disk_io_time_seconds_total{job="node-exporter", device=~"mmcblk.p.+|nvme.+|sd.+|vd.+|xvd.+|dm-.+|dasd.+"}[1m])
                        record: instance_device:node_disk_io_time_seconds:rate1m
                      - expr: |
                          rate(node_disk_io_time_weighted_seconds_total{job="node-exporter", device=~"mmcblk.p.+|nvme.+|sd.+|vd.+|xvd.+|dm-.+|dasd.+"}[1m])
                        record: instance_device:node_disk_io_time_weighted_seconds:rate1m
                      - expr: |
                          sum without (device) (
                            rate(node_network_receive_bytes_total{job="node-exporter", device!="lo"}[1m])
                          )
                        record: instance:node_network_receive_bytes_excluding_lo:rate1m
                      - expr: |
                          sum without (device) (
                            rate(node_network_transmit_bytes_total{job="node-exporter", device!="lo"}[1m])
                          )
                        record: instance:node_network_transmit_bytes_excluding_lo:rate1m
                      - expr: |
                          sum without (device) (
                            rate(node_network_receive_drop_total{job="node-exporter", device!="lo"}[1m])
                          )
                        record: instance:node_network_receive_drop_excluding_lo:rate1m
                      - expr: |
                          sum without (device) (
                            rate(node_network_transmit_drop_total{job="node-exporter", device!="lo"}[1m])
                          )
                        record: instance:node_network_transmit_drop_excluding_lo:rate1m
              podsecurity:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: pod-security-violation
                  rules:
                  - alert: PodSecurityViolation
                    annotations:
                      description: |
                        A workload (pod, deployment, deamonset, ...) was created somewhere
                        in the cluster but it did not match the PodSecurity "{{"{{"}} $labels.policy_level
                        {{"}}"}}" profile defined by its namespace either via the cluster-wide configuration
                        (which triggers on a "restricted" profile violations) or by the namespace
                        local Pod Security labels. Refer to Kubernetes documentation on Pod Security
                        Admission to learn more about these violations.
                      summary: One or more workloads users created in the cluster don't match their
                        Pod Security profile
                    expr: |
                      sum(increase(pod_security_evaluations_total{decision="deny",mode="audit",resource="pod"}[1d])) by (policy_level) > 0
                    labels:
                      namespace: in-cloud-monitoring
                      severity: info
              prometheus-k8s-prometheus-rules:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: prometheus
                  rules:
                  - alert: PrometheusBadConfig
                    annotations:
                      description: "Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has failed to reload its configuration."
                      summary: Failed Prometheus configuration reload.
                    expr: |
                      # Without max_over_time, failed scrapes could create false negatives, see
                      # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
                      max_over_time(prometheus_config_last_reload_successful{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) == 0
                    for: 10m
                    labels:
                      severity: warning
                  - alert: PrometheusNotificationQueueRunningFull
                    annotations:
                      description: "Alert notification queue of Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} is running full."
                      summary: Prometheus alert notification queue predicted to run full in less
                        than 30m.
                    expr: |
                      # Without min_over_time, failed scrapes could create false negatives, see
                      # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
                      (
                        predict_linear(prometheus_notifications_queue_length{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m], 60 * 30)
                      >
                        min_over_time(prometheus_notifications_queue_capacity{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      )
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusErrorSendingAlertsToSomeAlertmanagers
                    annotations:
                      description: |
                        '{{"{{"}} printf "%.1f" $value {{"}}"}}% errors while sending alerts from
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} to Alertmanager {{"{{"}}$labels.alertmanager}}.'
                      summary: Prometheus has encountered more than 1% errors sending alerts to
                        a specific Alertmanager.
                    expr: |
                      (
                        rate(prometheus_notifications_errors_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      /
                        rate(prometheus_notifications_sent_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      )
                      * 100
                      > 1
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusNotConnectedToAlertmanagers
                    annotations:
                      description: "Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} is not connected to any Alertmanagers."
                      summary: Prometheus is not connected to any Alertmanagers.
                    expr: |
                      # Without max_over_time, failed scrapes could create false negatives, see
                      # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
                      max_over_time(prometheus_notifications_alertmanagers_discovered{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) < 1
                    for: 10m
                    labels:
                      severity: warning
                  - alert: PrometheusTSDBReloadsFailing
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has detected
                        {{"{{"}}$value | humanize}} reload failures over the last 3h.
                      summary: Prometheus has issues reloading blocks from disk.
                    expr: |
                      increase(prometheus_tsdb_reloads_failures_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[3h]) > 0
                    for: 4h
                    labels:
                      severity: warning
                  - alert: PrometheusTSDBCompactionsFailing
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has detected
                        {{"{{"}}$value | humanize}} compaction failures over the last 3h.
                      summary: Prometheus has issues compacting blocks.
                    expr: |
                      increase(prometheus_tsdb_compactions_failed_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[3h]) > 0
                    for: 4h
                    labels:
                      severity: warning
                  - alert: PrometheusNotIngestingSamples
                    annotations:
                      description: "Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} is not ingesting samples."
                      summary: Prometheus is not ingesting samples.
                    expr: |
                      (
                        rate(prometheus_tsdb_head_samples_appended_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) <= 0
                      and
                        (
                          sum without(scrape_job) (prometheus_target_metadata_cache_entries{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}) > 0
                        or
                          sum without(rule_group) (prometheus_rule_group_rules{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}) > 0
                        )
                      )
                    for: 10m
                    labels:
                      severity: warning
                  - alert: PrometheusDuplicateTimestamps
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} is dropping
                        {{"{{"}} printf "%.4g" $value  {{"}}"}} samples/s with different values but duplicated
                        timestamp.
                      summary: Prometheus is dropping samples with duplicate timestamps.
                    expr: |
                      rate(prometheus_target_scrapes_sample_duplicate_timestamp_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 1h
                    labels:
                      severity: warning
                  - alert: PrometheusOutOfOrderTimestamps
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} is dropping
                        {{"{{"}} printf "%.4g" $value  {{"}}"}} samples/s with timestamps arriving out of order.
                      summary: Prometheus drops samples with out-of-order timestamps.
                    expr: |
                      rate(prometheus_target_scrapes_sample_out_of_order_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 1h
                    labels:
                      severity: warning
                  - alert: PrometheusRemoteStorageFailures
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} failed to send
                        {{"{{"}} printf "%.1f" $value {{"}}"}}% of the samples to {{"{{"}} $labels.remote_name {{"}}"}}:{{"{{"}} $labels.url {{"}}"}}
                      summary: Prometheus fails to send samples to remote storage.
                    expr: |
                      (
                        (rate(prometheus_remote_storage_failed_samples_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]))
                      /
                        (
                          (rate(prometheus_remote_storage_failed_samples_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) or rate(prometheus_remote_storage_samples_failed_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]))
                        +
                          (rate(prometheus_remote_storage_succeeded_samples_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) or rate(prometheus_remote_storage_samples_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]))
                        )
                      )
                      * 100
                      > 1
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusRemoteWriteBehind
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} remote write
                        is {{"{{"}} printf "%.1f" $value {{"}}"}}s behind for {{"{{"}} $labels.remote_name}}:{{"{{"}} $labels.url {{"}}"}}.
                      summary: Prometheus remote write is behind.
                    expr: |
                      # Without max_over_time, failed scrapes could create false negatives, see
                      # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
                      (
                        max_over_time(prometheus_remote_storage_highest_timestamp_in_seconds{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      - ignoring(remote_name, url) group_right
                        max_over_time(prometheus_remote_storage_queue_highest_sent_timestamp_seconds{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      )
                      > 120
                    for: 15m
                    labels:
                      severity: info
                  - alert: PrometheusRemoteWriteDesiredShards
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} remote write
                        desired shards calculation wants to run {{"{{"}} $value {{"}}"}} shards for queue
                        {{"{{"}}$labels.remote_name}}:{{"{{"}}$labels.url}}, which **may exceed** the configured max.
                        Please review 'prometheus_remote_storage_shards_max' for the corresponding job.
                      summary: Prometheus remote write desired shards calculation wants to run more
                        than configured max shards.
                    expr: |
                      # Without max_over_time, failed scrapes could create false negatives, see
                      # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
                      (
                        max_over_time(prometheus_remote_storage_shards_desired{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      >
                        max_over_time(prometheus_remote_storage_shards_max{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m])
                      )
                    for: 15m
                    labels:
                      severity: warning
                  - alert: VMRuleFailures
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has failed to
                        evaluate {{"{{"}} printf "%.0f" $value {{"}}"}} rules in the last 5m.
                      summary: Prometheus is failing rule evaluations.
                    expr: |
                      increase(prometheus_rule_evaluation_failures_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusMissingRuleEvaluations
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has missed {{"{{"}}
                        printf "%.0f" $value {{"}}"}} rule group evaluations in the last 5m.
                      summary: Prometheus is missing rule evaluations due to slow rule group evaluation.
                    expr: |
                      increase(prometheus_rule_group_iterations_missed_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusTargetLimitHit
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has dropped
                        {{"{{"}} printf "%.0f" $value {{"}}"}} targets because the number of targets exceeded
                        the configured target_limit.
                      summary: Prometheus has dropped targets because some scrape configs have exceeded
                        the targets limit.
                    expr: |
                      increase(prometheus_target_scrape_pool_exceeded_target_limit_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusLabelLimitHit
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has dropped
                        {{"{{"}} printf "%.0f" $value {{"}}"}} targets because some samples exceeded the configured
                        label_limit, label_name_length_limit or label_value_length_limit.
                      summary: Prometheus has dropped targets because some scrape configs have exceeded
                        the labels limit.
                    expr: |
                      increase(prometheus_target_scrape_pool_exceeded_label_limits_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusScrapeBodySizeLimitHit
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has failed {{"{{"}}
                        printf "%.0f" $value {{"}}"}} scrapes in the last 5m because some targets exceeded
                        the configured body_size_limit.
                      summary: Prometheus has dropped some targets that exceeded body size limit.
                    expr: |
                      increase(prometheus_target_scrapes_exceeded_body_size_limit_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusScrapeSampleLimitHit
                    annotations:
                      description: |
                        Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}} has failed {{"{{"}}
                        printf "%.0f" $value {{"}}"}} scrapes in the last 5m because some targets exceeded
                        the configured sample_limit.
                      summary: Prometheus has failed scrapes that have exceeded the configured sample
                        limit.
                    expr: |
                      increase(prometheus_target_scrapes_exceeded_sample_limit_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[5m]) > 0
                    for: 15m
                    labels:
                      severity: warning
                  - alert: PrometheusTargetSyncFailure
                    annotations:
                      description: |
                        {{"{{"}} printf "%.0f" $value {{"}}"}} targets in Prometheus {{"{{"}}$labels.namespace}}/{{"{{"}}$labels.pod}}
                        have failed to sync because invalid configuration was supplied.
                      runbook_url: https://github.com/openshift/runbooks/blob/master/alerts/cluster-monitoring-operator/PrometheusTargetSyncFailure.md
                      summary: Prometheus has failed to sync targets.
                    expr: |
                      increase(prometheus_target_sync_failed_total{job=~"prometheus-k8s|prometheus|prometheus-user-workload"}[30m]) > 0
                    for: 5m
                    labels:
                      severity: critical
              prometheus-k8s-rules:
                additionalLabels:
                  in-cloud-metrics: "infra"
                groups:
                - name: multus-admission-controller-monitor-service.rules
                  rules:
                  - expr: |
                      max  (network_attachment_definition_enabled_instance_up) by (networks)
                    record: cluster:network_attachment_definition_enabled_instance_up:max
                  - expr: |
                      max  (network_attachment_definition_instances) by (networks)
                    record: cluster:network_attachment_definition_instances:max
            
            
              
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            defaultRules:
              create: true
            alertmanager:
              enabled: false
            prometheus-node-exporter:
              enabled: false
            serviceAccount:
              create: false
            victoria-metrics-operator:
              enabled: false
            vmagent:
              enabled: false
            vmalert:
              enabled: false
            vmcluster:
              enabled: false
            vmsingle:
              enabled: false
            coreDns:
              enabled: false
            defaultDashboards:
              enabled: false
            kubeDns:
              enabled: false
            grafana:
              enabled: false
            kube-state-metrics:
              enabled: false
            kubeApiServer:
              enabled: false
            kubeControllerManager:
              enabled: false
            kubeEtcd:
              enabled: false
            kubeProxy:
              enabled: false
            kubeScheduler:
              enabled: false
            kubelet:
              enabled: false
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: victoriaMetricsAlertRulesApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: victoria-metrics-k8s-stack
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://victoriametrics.github.io/helm-charts/
                      targetRevision: 0.52.0
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: victoriaMetricsAlertRulesApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alert/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsvictoriametricsalertclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsVictoriaMetricsAlert
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsvictoriametricsalert-environment

    - step: set-environment-addons-victoriametricsalert
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-victoriametricsalert-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "victoria-metrics-alert" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "victoriaMetricsAlertApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "victoriaMetricsAlertApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "victoriaMetricsAlertApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            fullnameOverride: "vmalert"
            
            vmalert:
              spec:
                selectAllByDefault: false
                ruleNamespaceSelector: {}
                resources:
                  limits:
                    cpu: '1'
                    memory: 1Gi
                  requests:
                    cpu: '100m'
                    memory: 128Mi
                replicaCount: 1
                updateStrategy: RollingUpdate
                rollingUpdate:
                  maxSurge: 10%
                  maxUnavailable: 0
            
                remoteWrite:
                  url: "http://prometheus-server.beget-prometheus.svc:80/api/v1/write"
                  concurrency: 4
                remoteRead:
                  url: "http://prometheus-server.beget-prometheus.svc:80"
                datasource:
                  url: "http://prometheus-server.beget-prometheus.svc:80"
                notifiers:
                  - url: "http://vmalertmanager-alertmanager.beget-alertmanager.svc:9093"
            
                # extraArgs:
                #   external.url: ""
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            alertmanager:
              enabled: false
            defaultRules:
              create: false
            prometheus-node-exporter:
              enabled: false
            serviceAccount:
              create: false
            victoria-metrics-operator:
              enabled: false
            vmagent:
              enabled: false
            vmalert:
              enabled: true
            vmcluster:
              enabled: false
            vmsingle:
              enabled: false
            coreDns:
              enabled: false
            defaultDashboards:
              enabled: false
            kubeDns:
              enabled: false
            grafana:
              enabled: false
            kube-state-metrics:
              enabled: false
            kubeApiServer:
              enabled: false
            kubeControllerManager:
              enabled: false
            kubeEtcd:
              enabled: false
            kubeProxy:
              enabled: false
            kubeScheduler:
              enabled: false
            kubelet:
              enabled: false
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: victoriaMetricsAlertApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: victoria-metrics-k8s-stack
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://victoriametrics.github.io/helm-charts/
                      targetRevision: 0.52.0
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: victoriaMetricsAlertApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alertmanager/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsvictoriametricsalertmanagerclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsVictoriaMetricsAlertmanager
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsvictoriametricsalertmanager-environment

    - step: set-environment-addons-victoriametricsalertmanager
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-victoriametricsalertmanager-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "victoria-metrics-alertmanager" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "victoriaMetricsAlertmanagerApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "victoriaMetricsAlertmanagerApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "victoriaMetricsAlertmanagerApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            alertmanager:
              ingress:
                enabled: false
              config:
                global:
                  resolve_timeout: 5m
                route:
                  receiver: blackhole
                  routes:
                    # - receiver: mattermost-critical
                    #   matchers:
                    #     - severity =~ "critical"
                    #     - in-cloud_metrics =~ "infra"
                    #   group_by: ["cluster","alertname"]
                    #   group_interval: 3m
                    #   group_wait: 30s
                    #   repeat_interval: 60m
                    #   continue: false
            
                    # - receiver: mattermost-warning
                    #   matchers:
                    #     - severity =~ "warning"
                    #     - in-cloud_metrics =~ "infra"
                    #   group_by: ["cluster","alertname"]
                    #   group_interval: 3m
                    #   group_wait: 30s
                    #   repeat_interval: 60m
                    #   continue: false
            
                    - receiver: blackhole
                      matchers:
                        - alertname="Watchdog"
                receivers:
                  - name: 'blackhole'
              monzoTemplate:
                enabled: true
              spec:
                selectAllByDefault: false
                priorityClassName: system-cluster-critical
                configSelector: {}
                  # matchLabels:
                  #   in-cloud-metrics: "infra"
                configNamespaceSelector: {}
                resources:
                  requests:
                    cpu: '100m'
                    memory: 128Mi
                  limits:
                    cpu: '500m'
                    memory: 512Mi
                extraEnvs:
                  - name: GOMAXPROCS
                    value: '1'
                # extraArgs:
                #   "cluster.label": "infra"
                podMetadata: {}
                  # labels:
                  #   in-cloud-metrics: "infra"
            
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            alertmanager:
              enabled: true
            defaultRules:
              create: false
            defaultDashboards:
              enabled: false
            prometheus-node-exporter:
              enabled: false
            serviceAccount:
              create: false
            victoria-metrics-operator:
              enabled: false
            vmagent:
              enabled: false
            vmalert:
              enabled: false
            vmcluster:
              enabled: false
            vmsingle:
              enabled: false
            coreDns:
              enabled: false
            kubeDns:
              enabled: false
            grafana:
              enabled: false
            kube-state-metrics:
              enabled: false
            kubeApiServer:
              enabled: false
            kubeControllerManager:
              enabled: false
            kubeEtcd:
              enabled: false
            kubeProxy:
              enabled: false
            kubeScheduler:
              enabled: false
            kubelet:
              enabled: false
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: victoriaMetricsAlertmanagerApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: victoria-metrics-k8s-stack
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://victoriametrics.github.io/helm-charts/
                      targetRevision: 0.52.0
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: victoriaMetricsAlertmanagerApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/addons/victoria-metrics-operator/composition.addons.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: addonsvictoriametricsoperatorclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XAddonsVictoriaMetricsOperator
  mode: Pipeline
  pipeline:
    - step: environmentConfigs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xaddonsvictoriametricsoperator-environment

    - step: set-environment-addons-victoriametricsoperator
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.name
              fromFieldPath: spec.argocd.destination.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.destination.namespace
              fromFieldPath: spec.argocd.destination.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.namespace
              fromFieldPath: spec.argocd.namespace
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.project
              fromFieldPath: spec.argocd.project
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: argocd.releaseName
              fromFieldPath: spec.argocd.releaseName
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.cluster.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.host
              fromFieldPath: spec.cluster.host
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.port
              fromFieldPath: spec.cluster.port
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%.0f"
              type: FromCompositeFieldPath
            
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.argocd.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.xcluster.name
              fromFieldPath: spec.cluster.xcluster
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: addons-victoriametricsoperator-application
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $argocdDestinationName := default "" $environment.argocd.destination.name -}}
            {{- $argocdDestinationNamespace := default "" $environment.argocd.destination.namespace -}}
            {{- $argocdNamespace := default "" $environment.argocd.namespace -}}
            {{- $argocdProject := default "" $environment.argocd.project -}}
            {{- $argocdReleaseName := default "victoria-metrics-operator" $environment.argocd.releaseName -}}
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $host := default "" $environment.cluster.host -}}
            {{- $port := default 6443 $environment.cluster.port -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            {{- $xclusterName := default "" $environment.cluster.xcluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
            
            {{- $context                    := dict
              "root"                       .
              "argocdDestinationName"      $argocdDestinationName
              "argocdDestinationNamespace" $argocdDestinationNamespace
              "argocdNamespace"            $argocdNamespace
              "argocdProject"              $argocdProject
              "name"                       $name
              "namespace"                  $namespace
              "customer"                   $customer
              "clusterName"                $clusterName
              "host"                       $host
              "port"                       $port
              "providerConfigRefName"      $providerConfigRefName
              "argocdReleaseName"          $argocdReleaseName
              "trackingID"                 $trackingID
            }}
            
            {{- $appReady := dig "resource" "metadata" "annotations" "deployed.in-cloud.io/status" "False" (get $.observed.resources "victoriaMetricsOperatorApp" | default (dict)) }}
            {{- $healthApp := (dig "resource" "status" "atProvider" "manifest" "status" "health" "status" "Unknown" (get $.observed.resources "victoriaMetricsOperatorApp" | default (dict))) }}
            {{- $syncApp   := (dig "resource" "status" "atProvider" "manifest" "status" "sync" "status" "Unknown" (get $.observed.resources "victoriaMetricsOperatorApp" | default (dict))) }}
            {{- if and (eq $healthApp "Healthy") (eq $syncApp "Synced")}}
              {{- $appReady = "True" }}
            {{- end }}
            {{ $userValues                  := default (dict) .observed.composite.resource.spec.values }}
            
            {{- define "default.values" }}
            operator:
              disable_prometheus_converter: false
              useCustomConfigReloader: false
            
            logLevel: "info"
            
            env:
              - name: GOMAXPROCS
                value: '1'
              - name: VM_VMAGENTDEFAULT_CONFIGRELOADERMEMORY
                value: '100Mi'
              - name: VM_VMALERTMANAGER_CONFIGRELOADERMEMORY
                value: '100Mi'
              - name: VM_VMALERTDEFAULT_CONFIGRELOADERMEMORY
                value: '100Mi'
            
            resources:
              requests:
                cpu: 50m
                memory: 128Mi
              limits:
                cpu: 250m
                memory: 320Mi
            
            admissionWebhooks:
              enabled: false
            
            serviceMonitor:
              enabled: true
            
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                - podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                      - key: app.kubernetes.io/name
                        operator: In
                        values:
                        - victoria-metrics-operator
                      - key: app.kubernetes.io/instance
                        operator: In
                        values:
                        - vmoperator-infra
                    topologyKey: failure-domain.beta.kubernetes.io/region
                  weight: 100
            {{- end }}
            {{- $defaultValues := include "default.values" $context | fromYaml | default dict }}
            
            {{- define "immutable.values" }}
            
            {{- end }}
            {{- $immutableValues := include "immutable.values" $context | fromYaml | default dict }}
            
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                deployed.in-cloud.io/status: '{{ $appReady }}'
                gotemplating.fn.crossplane.io/composition-resource-name: victoriaMetricsOperatorApp
                gotemplating.fn.crossplane.io/ready: '{{ $appReady }}'
              name: '{{ $name }}-app'
            spec:
              deletionPolicy: Delete
              forProvider:
                manifest:
                  apiVersion: argoproj.io/v1alpha1
                  kind: Application
                  metadata:
                    annotations:
                      argocd.argoproj.io/tracking-id: '{{ $trackingID }}'
                      deployed.in-cloud.io/status: '{{ $appReady }}'
                    finalizers:
                    - resources-finalizer.argocd.argoproj.io
                    labels:
                      cluster.x-k8s.io/cluster-name: '{{ $clusterName }}'
                    name: '{{ $name }}'
                    namespace: '{{ $argocdNamespace }}'
                  spec:
                    destination:
                      name: '{{ $argocdDestinationName }}'
                      namespace: '{{ $argocdDestinationNamespace }}'
                    project: '{{ $argocdProject }}'
                    source:
                      chart: victoria-metrics-operator
                      helm:
                        releaseName: '{{ $argocdReleaseName }}'
                        values: |-
                          {{ $mergedValues := merge $immutableValues $userValues $defaultValues }}
                          {{ $mergedValues | toYaml | nindent 14 }}
                      repoURL: https://victoriametrics.github.io/helm-charts/
                      targetRevision: 0.49.2
                    syncPolicy:
                      automated:
                        prune: true
                        selfHeal: true
                      managedNamespaceMetadata:
                        labels:
                          in-cloud.io/clusterName: '{{ $clusterName }}'
                      syncOptions:
                      - CreateNamespace=true
              managementPolicies:
              - '*'
              providerConfigRef:
                name: '{{ $providerConfigRefName }}'
              readiness:
                celQuery: |
                  object.metadata.annotations['deployed.in-cloud.io/status'] == 'True'
                policy: DeriveFromCelQuery
              watch: true

    - step: set-status
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        resources:
        - name: victoriaMetricsOperatorApp
          patches:
            - toFieldPath: status.health
              fromFieldPath: status.atProvider.manifest.status.health.status
              type: ToCompositeFieldPath
            - toFieldPath: status.deployed
              fromFieldPath: metadata.annotations["deployed.in-cloud.io/status"]
              type: ToCompositeFieldPath
---
# Source: crossplane-functions/templates/xcertificate/composition.XCertificate.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: certificateclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XCertificate
  mode: Pipeline
  pipeline:
    - step: environment-configs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xcertificate-environment

    - step: set-environment-xcertificate
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.annotations
              fromFieldPath: spec.certificate.annotations
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.commonName
              fromFieldPath: spec.certificate.commonName
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: certificate.dnsNames
              fromFieldPath: spec.certificate.dnsNames
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.duration
              fromFieldPath: spec.certificate.duration
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: certificate.ipAddresses
              fromFieldPath: spec.certificate.ipAddresses
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.isCA
              fromFieldPath: spec.certificate.isCA
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.labels
              fromFieldPath: spec.certificate.labels
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.name
              fromFieldPath: spec.certificate.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: certificate.object.name
              fromFieldPath: spec.certificate.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s-certificate"
              
            - toFieldPath: certificate.renewBefore
              fromFieldPath: spec.certificate.renewBefore
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: certificate.rotationPolicy
              fromFieldPath: spec.certificate.rotationPolicy
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: certificate.secret.labels
              fromFieldPath: spec.certificate.secret.labels
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.secretName
              fromFieldPath: spec.certificate.secretName
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: certificate.subject.organizations
              fromFieldPath: spec.certificate.subject.organizations
              type: FromCompositeFieldPath
              
            - toFieldPath: certificate.usages
              fromFieldPath: spec.certificate.usages
              type: FromCompositeFieldPath
              
            - toFieldPath: common.annotations
              fromFieldPath: spec.common.annotations
              type: FromCompositeFieldPath
              
            - toFieldPath: common.labels
              fromFieldPath: spec.common.labels
              type: FromCompositeFieldPath
              
            - toFieldPath: common.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuer.annotations
              fromFieldPath: spec.issuer.annotations
              type: FromCompositeFieldPath
              
            - toFieldPath: issuer.apiVersion
              fromFieldPath: spec.issuer.apiVersion
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuer.enabled
              fromFieldPath: spec.issuer.enabled
              type: FromCompositeFieldPath
              
            - toFieldPath: issuer.kind
              fromFieldPath: spec.issuer.kind
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuer.labels
              fromFieldPath: spec.issuer.labels
              type: FromCompositeFieldPath
              
            - toFieldPath: issuer.name
              fromFieldPath: spec.issuer.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuer.object.name
              fromFieldPath: spec.issuer.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s-issuer"
              
            - toFieldPath: issuerSigner.annotations
              fromFieldPath: spec.issuerSigner.annotations
              type: FromCompositeFieldPath
              
            - toFieldPath: issuerSigner.apiVersion
              fromFieldPath: spec.issuerSigner.apiVersion
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuerSigner.kind
              fromFieldPath: spec.issuerSigner.kind
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuerSigner.labels
              fromFieldPath: spec.issuerSigner.labels
              type: FromCompositeFieldPath
              
            - toFieldPath: issuerSigner.name
              fromFieldPath: spec.issuerSigner.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuerSigner.object.name
              fromFieldPath: spec.issuerSigner.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s-issuer-signer"
              
            - toFieldPath: issuerSigner.type
              fromFieldPath: spec.issuerSigner.type
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: issuer.type
              fromFieldPath: spec.issuer.type
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: providerConfigRef.name
              fromFieldPath: spec.providerConfigRef.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"

    - step: issuer-signer
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $baseCustomer                     :=                            $environment.base.customer }}
            {{- $baseName                         :=                            $environment.base.name }}
              
            {{- $commonAnnotations := default (list) $environment.common.annotations -}}
            {{- $commonLabels := default (list) $environment.common.labels -}}
            {{- $commonNamespace := default "default" $environment.common.namespace -}}
            {{- $certificateName := default $baseName $environment.certificate.name -}}
            {{- $certificateCommonName := default $certificateName $environment.certificate.commonName -}}
            {{- $certificateObjectName := default (printf "%s-certificate" $baseName) $environment.certificate.object.name -}}
            {{- $certificateSecretName := default $certificateName $environment.certificate.secretName -}}
            {{- $certificateAnnotations := default (list) $environment.certificate.annotations -}}
            {{- $certificateLabels := default (list) $environment.certificate.labels -}}
            {{- $certificateSecretLabels := default (list) $environment.certificate.secret.labels -}}
            {{- $certificateDnsNames := default (list) $environment.certificate.dnsNames -}}
            {{- $certificateIpAddresses := default (list) $environment.certificate.ipAddresses -}}
            {{- $certificateSubjectOrganizations := default (list) $environment.certificate.subject.organizations -}}
            {{- $certificateUsages := default (list) $environment.certificate.usages -}}
            {{- $certificateDuration := default "2160h" $environment.certificate.duration -}}
            {{- $certificateRenewBefore := default "720h" $environment.certificate.renewBefore -}}
            {{- $certificateRotationPolicy := default "Never" $environment.certificate.rotationPolicy -}}
            {{- $certificateIsCa := default false $environment.certificate.isCA -}}
            {{- $issuerAnnotations := default (list) $environment.issuer.annotations -}}
            {{- $issuerApiVersion := default "cert-manager.io/v1" $environment.issuer.apiVersion -}}
            {{- $issuerEnabled := default false $environment.issuer.enabled -}}
            {{- $issuerKind := default "Issuer" $environment.issuer.kind -}}
            {{- $issuerLabels := default (list) $environment.issuer.labels -}}
            {{- $issuerName := default $baseName $environment.issuer.name -}}
            {{- $issuerObjectName := default (printf "%s-issuer" $baseName) $environment.issuer.object.name -}}
            {{- $issuerType := default "selfsigned" $environment.issuer.type -}}
            {{- $issuerSignerAnnotations := default (list) $environment.issuerSigner.annotations -}}
            {{- $issuerSignerApiVersion := default "cert-manager.io/v1" $environment.issuerSigner.apiVersion -}}
            {{- $issuerSignerKind := default "Issuer" $environment.issuerSigner.kind -}}
            {{- $issuerSignerLabels := default (list) $environment.issuerSigner.labels -}}
            {{- $issuerSignerName := default (printf "%s-signer" $baseName) $environment.issuerSigner.name -}}
            {{- $issuerSignerObjectName := default (printf "%s-issuer-signer" $baseName) $environment.issuerSigner.object.name -}}
            {{- $issuerSignerType := default "selfsigned" $environment.issuerSigner.type -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            
            {{- $certificateAnnotations            = concat $commonAnnotations  $certificateAnnotations -}}
            {{- $certificateLabels                 = concat $commonLabels       $certificateLabels -}}
            {{- $certificateSecretLabels           = concat $commonLabels       $certificateSecretLabels -}}
            {{- $issuerAnnotations                 = concat $commonAnnotations  $issuerAnnotations }}
            {{- $issuerLabels                      = concat $commonLabels       $issuerLabels }}
            {{- $issuerSignerAnnotations           = concat $commonAnnotations  $issuerSignerAnnotations }}
            {{- $issuerSignerLabels                = concat $commonLabels       $issuerSignerLabels }}
            
            {{- $certificateReady                 := "False" }}
            {{- $issuerReady                      := "False" }}
            {{- $issuerSignerReady                := "False" }}
            
            {{- with .observed.resources.certificate }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $certificateReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
            {{- with .observed.resources.issuer }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $issuerReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
            {{- with .observed.resources.issuerSigner }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $issuerSignerReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
              
              
            {{ if eq $issuerSignerType "selfsigned" }}
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: issuerSigner
                gotemplating.fn.crossplane.io/ready: {{ $issuerSignerReady | quote }}
              {{- if eq $issuerSignerReady "True" }}
                status.in-cloud.io/ready: {{ $issuerSignerReady | quote }}
              {{- end }}
              labels:
              {{- range $label := $issuerSignerLabels }}
                {{ $label.name }}: {{ $label.value }}
              {{- end }}
              name: {{ $issuerSignerObjectName }}
            spec: 
              forProvider:
                manifest:
              
                  
                  {{ if eq $issuerSignerType "selfsigned" }}
                  apiVersion: {{ $issuerSignerApiVersion }}
                  kind: {{ $issuerSignerKind }}
                  metadata:
                    annotations:
                    {{- range $annotation := $issuerSignerAnnotations }}
                      {{ $annotation.name }}: {{ $annotation.value }}
                    {{- end }}
                    labels:
                    {{- range $label := $issuerSignerLabels }}
                      {{ $label.name }}: {{ $label.value }}
                    {{- end }}
                    name: {{ $issuerSignerName }}
                    {{ if eq $issuerSignerKind "Issuer" }}
                    namespace: {{ $commonNamespace }}
                    {{ end }}
                  spec:
                    selfSigned: {}
                  {{ end }}
                    
              
              providerConfigRef:
                name: {{ $providerConfigRefName }}
              readiness:
                policy: DeriveFromCelQuery
                celQuery: "object.status.conditions.exists(c, c.type == 'Ready' && c.status == 'True')"
              watch: true
            {{ end }}
              

    - step: certificate
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $baseCustomer                     :=                            $environment.base.customer }}
            {{- $baseName                         :=                            $environment.base.name }}
              
            {{- $commonAnnotations := default (list) $environment.common.annotations -}}
            {{- $commonLabels := default (list) $environment.common.labels -}}
            {{- $commonNamespace := default "default" $environment.common.namespace -}}
            {{- $certificateName := default $baseName $environment.certificate.name -}}
            {{- $certificateCommonName := default $certificateName $environment.certificate.commonName -}}
            {{- $certificateObjectName := default (printf "%s-certificate" $baseName) $environment.certificate.object.name -}}
            {{- $certificateSecretName := default $certificateName $environment.certificate.secretName -}}
            {{- $certificateAnnotations := default (list) $environment.certificate.annotations -}}
            {{- $certificateLabels := default (list) $environment.certificate.labels -}}
            {{- $certificateSecretLabels := default (list) $environment.certificate.secret.labels -}}
            {{- $certificateDnsNames := default (list) $environment.certificate.dnsNames -}}
            {{- $certificateIpAddresses := default (list) $environment.certificate.ipAddresses -}}
            {{- $certificateSubjectOrganizations := default (list) $environment.certificate.subject.organizations -}}
            {{- $certificateUsages := default (list) $environment.certificate.usages -}}
            {{- $certificateDuration := default "2160h" $environment.certificate.duration -}}
            {{- $certificateRenewBefore := default "720h" $environment.certificate.renewBefore -}}
            {{- $certificateRotationPolicy := default "Never" $environment.certificate.rotationPolicy -}}
            {{- $certificateIsCa := default false $environment.certificate.isCA -}}
            {{- $issuerAnnotations := default (list) $environment.issuer.annotations -}}
            {{- $issuerApiVersion := default "cert-manager.io/v1" $environment.issuer.apiVersion -}}
            {{- $issuerEnabled := default false $environment.issuer.enabled -}}
            {{- $issuerKind := default "Issuer" $environment.issuer.kind -}}
            {{- $issuerLabels := default (list) $environment.issuer.labels -}}
            {{- $issuerName := default $baseName $environment.issuer.name -}}
            {{- $issuerObjectName := default (printf "%s-issuer" $baseName) $environment.issuer.object.name -}}
            {{- $issuerType := default "selfsigned" $environment.issuer.type -}}
            {{- $issuerSignerAnnotations := default (list) $environment.issuerSigner.annotations -}}
            {{- $issuerSignerApiVersion := default "cert-manager.io/v1" $environment.issuerSigner.apiVersion -}}
            {{- $issuerSignerKind := default "Issuer" $environment.issuerSigner.kind -}}
            {{- $issuerSignerLabels := default (list) $environment.issuerSigner.labels -}}
            {{- $issuerSignerName := default (printf "%s-signer" $baseName) $environment.issuerSigner.name -}}
            {{- $issuerSignerObjectName := default (printf "%s-issuer-signer" $baseName) $environment.issuerSigner.object.name -}}
            {{- $issuerSignerType := default "selfsigned" $environment.issuerSigner.type -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            
            {{- $certificateAnnotations            = concat $commonAnnotations  $certificateAnnotations -}}
            {{- $certificateLabels                 = concat $commonLabels       $certificateLabels -}}
            {{- $certificateSecretLabels           = concat $commonLabels       $certificateSecretLabels -}}
            {{- $issuerAnnotations                 = concat $commonAnnotations  $issuerAnnotations }}
            {{- $issuerLabels                      = concat $commonLabels       $issuerLabels }}
            {{- $issuerSignerAnnotations           = concat $commonAnnotations  $issuerSignerAnnotations }}
            {{- $issuerSignerLabels                = concat $commonLabels       $issuerSignerLabels }}
            
            {{- $certificateReady                 := "False" }}
            {{- $issuerReady                      := "False" }}
            {{- $issuerSignerReady                := "False" }}
            
            {{- with .observed.resources.certificate }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $certificateReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
            {{- with .observed.resources.issuer }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $issuerReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
            {{- with .observed.resources.issuerSigner }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $issuerSignerReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
              
              
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: certificate
                gotemplating.fn.crossplane.io/ready: {{ $certificateReady | quote }}
              {{- if eq $certificateReady "True" }}
                status.in-cloud.io/ready: {{ $certificateReady | quote }}
              {{- end }}
              labels:
              {{- range $label := $certificateLabels }}
                {{ $label.name }}: {{ $label.value }}
              {{- end }}
              name: {{ $certificateObjectName }}
            spec: 
              forProvider:
                manifest:
              
                  
                  apiVersion: cert-manager.io/v1
                  kind: Certificate
                  metadata:
                    annotations:
                    {{- range $annotation := $certificateAnnotations }}
                      {{ $annotation.name }}: {{ $annotation.value }}
                    {{- end }}
                    labels:
                    {{- range $label := $certificateLabels }}
                      {{ $label.name }}: {{ $label.value }}
                    {{- end }}
                    name: {{ $certificateName }}
                    namespace: {{ $commonNamespace }}
                  spec: 
                    isCA: true
                    commonName: {{ $certificateCommonName }}
                    secretName: {{ $certificateSecretName }}
                    duration: {{ $certificateDuration }}
                    renewBefore: {{ $certificateRenewBefore }}
                    privateKey:
                      algorithm: RSA
                      size: 2048
                      rotationPolicy: {{ $certificateRotationPolicy }}
                    {{- if $certificateIpAddresses }}
                    ipAddresses:
                      {{- range $ipAddress := $certificateIpAddresses }}
                      - {{ $ipAddress }}
                      {{- end }}
                    {{- end }}
                    {{- if $certificateDnsNames }}
                    dnsNames:
                      {{- range $dnsName := $certificateDnsNames }}
                        - {{ $dnsName }}
                      {{- end }}
                    {{- end }}
                    issuerRef:
                      name: {{ $issuerSignerName }}
                      kind: {{ $issuerSignerKind }}
                      group: {{ regexReplaceAll "/.*" $issuerSignerApiVersion "" }}
                    {{- if $certificateSubjectOrganizations }}
                    subject:
                      organizations:
                      {{- range $organization := $certificateSubjectOrganizations }}
                        - {{ $organization }}
                      {{- end }}
                    {{- end }}
                    {{- if $certificateUsages }}
                    usages:
                      {{- range $usage := $certificateUsages }}
                      - {{ $usage }}
                      {{- end }}
                    {{- end }}
                    secretTemplate:
                      labels:
                      {{- range $label := $certificateSecretLabels }}
                        {{ $label.name }}: {{ $label.value }}
                      {{- end }}
                    
              
              providerConfigRef:
                name: {{ $providerConfigRefName }}
              readiness:
                policy: DeriveFromCelQuery
                celQuery: "object.status.conditions.exists(c, c.type == 'Ready' && c.status == 'True')"
              references:
                - patchesFrom:
                    apiVersion: kubernetes.crossplane.io/v1alpha2
                    kind: Object
                    name: {{ $issuerSignerObjectName }}
                    fieldPath: "metadata.annotations['status.in-cloud.io/ready']"
                  toFieldPath: "metadata.annotations['dependency.in-cloud.io/ready']"
              watch: true
              

    - step: issuer
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $baseCustomer                     :=                            $environment.base.customer }}
            {{- $baseName                         :=                            $environment.base.name }}
              
            {{- $commonAnnotations := default (list) $environment.common.annotations -}}
            {{- $commonLabels := default (list) $environment.common.labels -}}
            {{- $commonNamespace := default "default" $environment.common.namespace -}}
            {{- $certificateName := default $baseName $environment.certificate.name -}}
            {{- $certificateCommonName := default $certificateName $environment.certificate.commonName -}}
            {{- $certificateObjectName := default (printf "%s-certificate" $baseName) $environment.certificate.object.name -}}
            {{- $certificateSecretName := default $certificateName $environment.certificate.secretName -}}
            {{- $certificateAnnotations := default (list) $environment.certificate.annotations -}}
            {{- $certificateLabels := default (list) $environment.certificate.labels -}}
            {{- $certificateSecretLabels := default (list) $environment.certificate.secret.labels -}}
            {{- $certificateDnsNames := default (list) $environment.certificate.dnsNames -}}
            {{- $certificateIpAddresses := default (list) $environment.certificate.ipAddresses -}}
            {{- $certificateSubjectOrganizations := default (list) $environment.certificate.subject.organizations -}}
            {{- $certificateUsages := default (list) $environment.certificate.usages -}}
            {{- $certificateDuration := default "2160h" $environment.certificate.duration -}}
            {{- $certificateRenewBefore := default "720h" $environment.certificate.renewBefore -}}
            {{- $certificateRotationPolicy := default "Never" $environment.certificate.rotationPolicy -}}
            {{- $certificateIsCa := default false $environment.certificate.isCA -}}
            {{- $issuerAnnotations := default (list) $environment.issuer.annotations -}}
            {{- $issuerApiVersion := default "cert-manager.io/v1" $environment.issuer.apiVersion -}}
            {{- $issuerEnabled := default false $environment.issuer.enabled -}}
            {{- $issuerKind := default "Issuer" $environment.issuer.kind -}}
            {{- $issuerLabels := default (list) $environment.issuer.labels -}}
            {{- $issuerName := default $baseName $environment.issuer.name -}}
            {{- $issuerObjectName := default (printf "%s-issuer" $baseName) $environment.issuer.object.name -}}
            {{- $issuerType := default "selfsigned" $environment.issuer.type -}}
            {{- $issuerSignerAnnotations := default (list) $environment.issuerSigner.annotations -}}
            {{- $issuerSignerApiVersion := default "cert-manager.io/v1" $environment.issuerSigner.apiVersion -}}
            {{- $issuerSignerKind := default "Issuer" $environment.issuerSigner.kind -}}
            {{- $issuerSignerLabels := default (list) $environment.issuerSigner.labels -}}
            {{- $issuerSignerName := default (printf "%s-signer" $baseName) $environment.issuerSigner.name -}}
            {{- $issuerSignerObjectName := default (printf "%s-issuer-signer" $baseName) $environment.issuerSigner.object.name -}}
            {{- $issuerSignerType := default "selfsigned" $environment.issuerSigner.type -}}
            {{- $providerConfigRefName := default "default" $environment.providerConfigRef.name -}}
            
            {{- $certificateAnnotations            = concat $commonAnnotations  $certificateAnnotations -}}
            {{- $certificateLabels                 = concat $commonLabels       $certificateLabels -}}
            {{- $certificateSecretLabels           = concat $commonLabels       $certificateSecretLabels -}}
            {{- $issuerAnnotations                 = concat $commonAnnotations  $issuerAnnotations }}
            {{- $issuerLabels                      = concat $commonLabels       $issuerLabels }}
            {{- $issuerSignerAnnotations           = concat $commonAnnotations  $issuerSignerAnnotations }}
            {{- $issuerSignerLabels                = concat $commonLabels       $issuerSignerLabels }}
            
            {{- $certificateReady                 := "False" }}
            {{- $issuerReady                      := "False" }}
            {{- $issuerSignerReady                := "False" }}
            
            {{- with .observed.resources.certificate }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $certificateReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
            {{- with .observed.resources.issuer }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $issuerReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
            {{- with .observed.resources.issuerSigner }}
              {{- range (dig "resource" "status" "atProvider" "manifest" "status" "conditions" (list) .) }}
                {{- if eq .type "Ready" }}
                  {{- $issuerSignerReady = (.status) }}
                {{- end }}
              {{- end }}
            {{- end }}
            
              
              
            {{ if $issuerEnabled }}
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: issuer
                gotemplating.fn.crossplane.io/ready: {{ $issuerReady | quote }}
              {{- if eq $issuerReady "True" }}
                status.in-cloud.io/ready: {{ $issuerReady | quote }}
              {{- end }}
              labels:
              {{- range $label := $issuerLabels }}
                {{ $label.name }}: {{ $label.value }}
              {{- end }}
              name: {{ $issuerObjectName }}
            spec: 
              forProvider:
                manifest:
              
                  
                  apiVersion: {{ $issuerApiVersion }}
                  kind: {{ $issuerKind }}
                  metadata:
                    annotations:
                    {{- range $annotation := $issuerAnnotations }}
                      {{ $annotation.name }}: {{ $annotation.value }}
                    {{- end }}
                    labels:
                    {{- range $label := $issuerLabels }}
                      {{ $label.name }}: {{ $label.value }}
                    {{- end }}
                    name: {{ $issuerName }}
                    {{ if eq $issuerKind "Issuer" }}
                    namespace: {{ $commonNamespace }}
                    {{ end }}
                  spec:
                    ca:
                      secretName: {{ $certificateSecretName }}
                    
              
              providerConfigRef:
                name: {{ $providerConfigRefName }}
              readiness:
                policy: DeriveFromCelQuery
                celQuery: "object.status.conditions.exists(c, c.type == 'Ready' && c.status == 'True')"
              references:
                - dependsOn:
                    apiVersion: kubernetes.crossplane.io/v1alpha2
                    kind: Object
                    name: {{ $certificateObjectName }}
                - patchesFrom:
                    apiVersion: kubernetes.crossplane.io/v1alpha2
                    kind: Object
                    name: {{ $certificateObjectName }}
                    fieldPath: "metadata.annotations['status.in-cloud.io/ready']"
                  toFieldPath: "metadata.annotations['dependency.in-cloud.io/ready']"
              watch: true
            {{ end }}
---
# Source: crossplane-functions/templates/xcertificateset/composition.XCertificate.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: certificatesetclaims.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XCertificateSet
  mode: Pipeline
  pipeline:
    - step: environment-configs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xcertificateset-environment

    - step: set-environment-xcertificateset
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
              
            - toFieldPath: common.annotations
              fromFieldPath: spec.common.annotations
              type: FromCompositeFieldPath
              
            - toFieldPath: common.labels
              fromFieldPath: spec.common.labels
              type: FromCompositeFieldPath
              
            - toFieldPath: common.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              
            - toFieldPath: common.providerConfigRef.name
              fromFieldPath: spec.common.providerConfigRef.name
              type: FromCompositeFieldPath
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"

    - step: xcertificates
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $baseCustomer                     :=                            $environment.base.customer }}
            {{- $baseName                         :=                            $environment.base.name }}
            {{- $baseNamespace                    :=                            $environment.base.namespace }}
              
            {{- $commonAnnotations := default (list) $environment.common.annotations -}}
            {{- $commonLabels := default (list) $environment.common.labels -}}
            {{- $commonNamespace := default $baseNamespace $environment.common.namespace -}}
            {{- $commonProviderConfigRefName := default "default" $environment.common.providerConfigRef.name -}}
            
              
            {{- $common                 := deepCopy (default (dict) .observed.composite.resource.spec.common) -}}
            {{- $ProviderConfigRefName  := default "default" (dig "providerConfigRef" "name" "" .observed.composite.resource.spec) -}}
            {{- range $key, $value      := (default (dict) .observed.composite.resource.spec.xcertificates) -}}
              {{- $xCertSuffix          := $value.common.suffix | default "" }}
              {{- $xCertName            := $value.common.name | default "" }}
              {{- $xCertName            = default (printf "%s%s" $baseName $xCertSuffix) $xCertName }}
              {{- $xCertificate         := deepCopy (default (dict) $value) -}}
              {{- $c                    := deepCopy (default (dict) (get $xCertificate "common")) -}}
              {{- $_                    := unset $c "name" -}}
              {{- $_                    := unset $c "suffix" -}}
              {{- $_                    := set $xCertificate "common" $c -}}
              {{- $xCertificate         = merge $xCertificate (dict "common" $common) -}}
              {{- $_                    := set $xCertificate "ProviderConfigRef" (dict "name" $ProviderConfigRefName) -}}
              {{- $xCertificateReady    := "False" -}}
              {{- range (dig "resource" "status" "conditions" (list) (get $.observed.resources $key | default (dict))) }}
                {{- if eq .type "Ready" }}
                  {{- $xCertificateReady = (.status) }}
                {{- end }}
              {{- end }}
            
              {{- $certificateCreated := "False" }}
              {{- $permitionToCreateCertificate := "True" }}
              {{- if hasKey $.observed.resources $key }}
                {{- $certificateCreated = "True" }}
              {{- else }}
                {{- if and (hasKey $value "dependsOn") (gt (len $value.dependsOn) 0) }}
                  {{- range $value.dependsOn }}
                    {{- $statusReadyExists := "False" }}
                    {{- range (dig "resource" "status" "conditions" (list) (get $.observed.resources . | default (dict))) }}
                      {{- if (eq .type "Ready")  }}
                        {{- $statusReadyExists = "True" }}
                        {{- if (ne .status "True") }}
                          {{- $permitionToCreateCertificate = "False" }}
                        {{- end }}
                      {{- end }}
                    {{- end }}
                    {{- if (ne $statusReadyExists "True") }}
                      {{- $permitionToCreateCertificate = "False" }}
                    {{- end }}
                  {{- end }}
                {{- end }}
              {{- end }}
              {{- if or (eq $permitionToCreateCertificate "True") (eq $certificateCreated "True") }}
            ---
            apiVersion: in-cloud.io/v1alpha1
            kind: XCertificate
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: {{ $key }}
                gotemplating.fn.crossplane.io/ready: {{ $xCertificateReady | quote }}
                debug.in-cloud.io/permitionocreatecertificate: {{ $permitionToCreateCertificate | quote }}
                debug.in-cloud.io/certificatecreated: {{ $certificateCreated | quote }}
              {{- if eq $xCertificateReady "True" }}
                status.in-cloud.io/ready: {{ $xCertificateReady | quote }}
              {{- end }}
              {{- if $xCertificate.common.annotations }}
                {{- range $annotation := $xCertificate.common.annotations }}
                {{ $annotation.name }}: {{ $annotation.value }}
                {{- end }}
              {{- end }}
              {{- if $xCertificate.common.labels }}
              labels:
                {{- range $label := $xCertificate.common.labels }}
                {{ $label.name }}: {{ $label.value }}
                {{- end }}
              {{- end }}
              name: {{ $xCertName }}
            spec:
              compositeDeletePolicy: Foreground
              {{- $xCertificate | toYaml | nindent 2 }}
            
              {{- end -}}
            {{- end -}}
---
# Source: crossplane-functions/templates/xclusterComponents/composition.XClusterComponents.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cluster-component-claim.in-cloud.io
spec:
  compositeTypeRef:
    apiVersion: in-cloud.io/v1alpha1
    kind: XClusterComponent
  mode: Pipeline
  pipeline:
    - step: environment-configs
      functionRef:
        name: function-environment-configs
      input:
        apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
        kind: Input
        spec:
          environmentConfigs:
          - type: Reference
            ref:
              name: xclustercomponent-environment

    - step: set-environment-addons-xclustercomponents
      functionRef:
        name: function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        kind: Resources
        environment:
          patches:
            - toFieldPath: base.name
              fromFieldPath: metadata.name
              type: FromCompositeFieldPath
            
            - toFieldPath: base.namespace
              fromFieldPath: spec.common.namespace
              type: FromCompositeFieldPath
            
            - toFieldPath: base.customer
              fromFieldPath: spec.customer
              type: FromCompositeFieldPath
            
            - toFieldPath: cluster.name
              fromFieldPath: spec.name
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath
            
            - toFieldPath: trackingID
              fromFieldPath: spec.trackingID
              transforms:
                - type: string
                  string:
                    type: Format
                    fmt: "%s"
              type: FromCompositeFieldPath

    - step: xcertificateset
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |-
            
            {{- $environment                      := index .context "apiextensions.crossplane.io/environment" }}
            
            {{- $customer                          :=                            $environment.base.customer }}
            {{- $name                              :=                            $environment.base.name }}
            {{- $namespace                         :=                            $environment.base.namespace }}
              
            {{- $clusterName := default "" $environment.cluster.name -}}
            {{- $trackingID := default "" $environment.trackingID -}}
            
              
            
            {{- $xCertificateSetReady    := "False" -}}
            {{- range (dig "resource" "status" "conditions" (list) (get $.observed.resources "xCertificateSet" | default (dict))) }}
              {{- if eq .type "Ready" }}
                {{- $xCertificateSetReady = (.status) }}
              {{- end }}
            {{- end }}
            
            apiVersion: in-cloud.io/v1alpha1
            kind: XCertificateSet
            metadata:
              annotations:
                argocd.argoproj.io/tracking-id: {{ $trackingID }}
                gotemplating.fn.crossplane.io/composition-resource-name: xCertificateSet
                gotemplating.fn.crossplane.io/ready: {{ $xCertificateSetReady | quote }}
              {{- if eq $xCertificateSetReady "True" }}
                status.in-cloud.io/ready: {{ $xCertificateSetReady | quote }}
              {{- end }}
              labels:
                cluster.x-k8s.io/cluster-name: {{ $infraName }}
              name: {{ $infraName }}
            spec:
              compositeDeletePolicy: Foreground
              common:
                labels:
                  - name: "cluster.x-k8s.io/cluster-name"
                    value:  {{ $infraName }}
                annotations:
                  - name: "argocd.argoproj.io/tracking-id"
                    value: {{ $trackingID }}
                namespace: {{ $namespace }}
              providerConfigRef:
                name: default
              customer: {{ $customer }}
              xcertificates:
                caOidc:
                  common:
                    suffix: "-ca-oidc"
                  certificate:
                    duration: 175200h
                    isCA: true
                    usages:
                      - cert sign
                      - key encipherment
                      - digital signature
---
# Source: crossplane-functions/templates/addons/argocd/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsargocd-environment
data:
  argocd:
    destination:
      name: ""
      namespace: argocd-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/beget-provider/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsbegetcmprovider-environment
data:
  argocd:
    destination:
      name: ""
      namespace: begetcmprovider-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/capi-kubeadm-bootstrap/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscapikubeadmbootstrap-environment
data:
  argocd:
    destination:
      name: ""
      namespace: capikubeadmbootstrap-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/capi-kubeadm-control-plane/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscapikubeadmcontrolplane-environment
data:
  argocd:
    destination:
      name: ""
      namespace: capikubeadmcontrolplane-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/capi/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscapi-environment
data:
  argocd:
    destination:
      name: ""
      namespace: capi-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/ccm/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsccm-environment
data:
  argocd:
    destination:
      name: ""
      namespace: ccm-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/cert-manager-csi-driver/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscertmanagercsidriver-environment
data:
  argocd:
    destination:
      name: ""
      namespace: certmanagercsidriver-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/cert-manager/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscertmanager-environment
data:
  argocd:
    destination:
      name: ""
      namespace: certmanager-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/cilium/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscilium-environment
data:
  argocd:
    destination:
      name: ""
      namespace: cilium-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/coredns/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscoredns-environment
data:
  argocd:
    destination:
      name: ""
      namespace: coredns-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/crossplane-compositions/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscrossplanecompositions-environment
data:
  argocd:
    destination:
      name: ""
      namespace: crossplanecompositions-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/crossplane-functions/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscrossplanefunctions-environment
data:
  argocd:
    destination:
      name: ""
      namespace: crossplanefunctions-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/crossplane-xcluster/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscrossplanexcluster-environment
data:
  argocd:
    destination:
      name: ""
      namespace: crossplanexcluster-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/crossplane/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscrossplane-environment
data:
  argocd:
    destination:
      name: ""
      namespace: crossplane-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/csrc/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonscsrc-environment
data:
  argocd:
    destination:
      name: ""
      namespace: csrc-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/dex/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsdex-environment
data:
  argocd:
    destination:
      name: ""
      namespace: dex-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/etcd-backups/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsetcdbackup-environment
data:
  argocd:
    destination:
      name: ""
      namespace: etcdbackup-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/grafana-dashboards/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsgrafanadashboards-environment
data:
  argocd:
    destination:
      name: ""
      namespace: grafanadashboards-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/grafana-operator/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsgrafanaoperator-environment
data:
  argocd:
    destination:
      name: ""
      namespace: grafanaoperator-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/grafana/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsgrafana-environment
data:
  argocd:
    destination:
      name: ""
      namespace: grafana-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/helm-inserter/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonshelminserter-environment
data:
  argocd:
    destination:
      name: ""
      namespace: helminserter-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/incloud-ui/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsincloudui-environment
data:
  argocd:
    destination:
      name: ""
      namespace: incloudui-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/incloud-web-resources/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsincloudwebresources-environment
data:
  argocd:
    destination:
      name: ""
      namespace: incloudwebresources-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/istio-base/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsistiobase-environment
data:
  argocd:
    destination:
      name: ""
      namespace: istiobase-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/istio-gw/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsistiogw-environment
data:
  argocd:
    destination:
      name: ""
      namespace: istiogw-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/istiod/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsistiod-environment
data:
  argocd:
    destination:
      name: ""
      namespace: istiod-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/konnectivity-agent/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonskonnectivityagent-environment
data:
  argocd:
    destination:
      name: ""
      namespace: konnectivityagent-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/konnectivity-server/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonskonnectivityserver-environment
data:
  argocd:
    destination:
      name: ""
      namespace: konnectivityserver-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/kube-state-metrics/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonskubestatemetrics-environment
data:
  argocd:
    destination:
      name: ""
      namespace: kubestatemetrics-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/kubeadmResources/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonskubeadmresources-environment
data:
  argocd:
    destination:
      name: ""
      namespace: kubeadmresources-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/metallb/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsmetallb-environment
data:
  argocd:
    destination:
      name: ""
      namespace: metallb-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/metrics-server/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsmetricsserver-environment
data:
  argocd:
    destination:
      name: ""
      namespace: metricsserver-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/process-exporter/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsprocessexporter-environment
data:
  argocd:
    destination:
      name: ""
      namespace: processexporter-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/prometheus-adapter/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsprometheusadapter-environment
data:
  argocd:
    destination:
      name: ""
      namespace: prometheusadapter-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/prometheus-node-exporter/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsprometheusnodeexporter-environment
data:
  argocd:
    destination:
      name: ""
      namespace: prometheusnodeexporter-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/prometheus/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsprometheus-environment
data:
  argocd:
    destination:
      name: ""
      namespace: prometheus-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/trivy-operator/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonstrivyoperator-environment
data:
  argocd:
    destination:
      name: ""
      namespace: trivyoperator-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/trust-manager/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonstrustmanager-environment
data:
  argocd:
    destination:
      name: ""
      namespace: trustmanager-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/victoria-metrics-agent/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsvictoriametricsagent-environment
data:
  argocd:
    destination:
      name: ""
      namespace: victoriametricsagent-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alert-rules/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsvictoriametricsalertrules-environment
data:
  argocd:
    destination:
      name: ""
      namespace: victoriametricsalertrules-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alert/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsvictoriametricsalert-environment
data:
  argocd:
    destination:
      name: ""
      namespace: victoriametricsalert-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/victoria-metrics-alertmanager/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsvictoriametricsalertmanager-environment
data:
  argocd:
    destination:
      name: ""
      namespace: victoriametricsalertmanager-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/addons/victoria-metrics-operator/environmentConfig.addons.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xaddonsvictoriametricsoperator-environment
data:
  argocd:
    destination:
      name: ""
      namespace: victoriametricsoperator-system
    namespace: argocd-system
    project: default
  cluster:
    name: ""
    host: ""
    port: 0
    xcluster:
      name: ""
  providerConfigRef:
    name: default
  trackingID: ""
  values:
    version: v1alpha1
  version: v1alpha1
---
# Source: crossplane-functions/templates/xcertificate/environmentConfig.XCertificate.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xcertificate-environment
data:
  base:
    name: ""
    customer: ""

  common:
    annotations: []
    labels: []
    namespace: ""

  certificate:
    annotations: []
    dnsNames: []
    commonName: ""
    duration: ""
    ipAddresses: []
    isCA: false
    labels: []
    name: ""
    renewBefore: ""
    rotationPolicy: ""
    secretLabels: []
    secretName: ""
    subjectOrganizations: []
    usages: []

  issuer:
    annotations: []
    kind: ""
    name: ""
    labels: []
    object:
      name: ""
    type: ""

  issuerSigner:
    annotations: []
    kind: ""
    name: ""
    labels: []
    object:
      name: ""
    type: ""
---
# Source: crossplane-functions/templates/xcertificateset/environmentConfig.XCertificate.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xcertificateset-environment
data:
  base:
    name: ""
    namespace: ""
    customer: ""
  common:
    annotations: []
    labels: []
    namespace: ""
    providerConfigRef:
      name: default
  xcertificates:
    template:
      name: ""
      common:
        annotations: []
        labels: []
        namespace: ""
        suffix: ""

      certificate:
        annotations: []
        dnsNames: []
        ipAddresses: []
        isCA: false
        labels: []
        name: ""
        namespace: ""
        renewBefore: ""
        rotationPolicy: ""
        secretLabels: []
        secretName: ""
        subjectOrganizations: []
        usages: []

      issuer:
        annotations: []
        kind: ""
        name: ""
        labels: []
        object:
          name: ""
        type: ""

      issuerSigner:
        annotations: []
        kind: ""
        name: ""
        labels: []
        object:
          name: ""
        type: ""
      providerConfigRef:
        name: default
---
# Source: crossplane-functions/templates/xclusterComponents/environmentConfigComponents.yaml
apiVersion: apiextensions.crossplane.io/v1beta1
kind: EnvironmentConfig
metadata:
  name: xclustercomponent-environment
data:
  base:
    name: ""
    namespace: ""
    customer: ""
  clusterName: ""
  trackingID: ""
  namespace: ""
  customer: ""
